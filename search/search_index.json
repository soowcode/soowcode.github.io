{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"About US Bienvenue \u00e0 SoowCode \ud83d\udc4b Nous sommes comme des centaines d'autres bidouilleurs. Ici, nous partageons ce qui nous a \u00e9t\u00e9 utile sous forme de tutoriels pour que vous puissiez en b\u00e9n\u00e9ficier. Nous abordons de nombreux sujets, m\u00e9langeant les langages de programmation, les actions GitHub, Docker, MQTT (IoT) et les tests en Python. Ainsi, la plupart des astuces sont r\u00e9pertori\u00e9es ici pour en faire un document destin\u00e9 aux bidouilleurs. Quelques tutoriels que vous trouverez ici ! Prgrammations DevOps Others PYTHON Docker MQTT Python commandes Docker Mysql Ubuntu-commandes Python fonctions GitHub-Actions Apache-benchmark Callback-function GitLab-CI Good to know React-native Git delete Happy path and edge cases Tests avec python Docker registry Npm vs npx Cockpit Author \ud83d\udc64 Ousmane SOW Website: https://soowcode.github.io Twitter: @Sow34979868 Github: @sowousmane LinkedIn: @ousmane-sow-79071412a CV: CV-DevOps Soutenez-nous ! Laissez-nous une \u2b50\ufe0f ici si ce projet vous a \u00e9t\u00e9 utile !","title":"About US"},{"location":"#about-us","text":"","title":"About US"},{"location":"MQTT/","text":"MQTT Introduction Utilis\u00e9 pour le transfert de Machine-to-Machine (M2M) , MQTT est consid\u00e9r\u00e9 comme l'un des principaux protocoles de messagerie de l'internet des objets, mais c\u00f4t\u00e9 industriel ( IoT) . Il est open source, l\u00e9ger ( en t\u00eate de messages de 2 octets ), faible utilisation de la bande passante du r\u00e9seau ( 93 fois plus rapides que le HTTP ), faible consommation d'\u00e9nergie ( 11 fois moins pour envoyer et 170 pour ne recevoir que le HTTP ) et fiable (m\u00e9canisme natif de Qos, acronyme de Quality of Service). Son autre avantage, c'est qu'il est extr\u00eamement facile \u00e0 mettre en \u0153uvre du c\u00f4t\u00e9 client. C'est donc la solution parfaite pour l'IoT. Attention cependant, fortement vuln\u00e9rable si certaines conditions de s\u00e9curit\u00e9 ne sont pas r\u00e9unies, comme l'absence de chiffrage sur la transmission & l'authentification (MQTT est capable d'\u00eatre d\u00e9ploy\u00e9 sans chiffrement TLS ou SSL.) Utilis\u00e9 par nombreux acteurs dans le monde Facebook, openstack, geospatial, Bosh, IBM, Adarfuit, EVERYTHING IoT, Google Home Assistant, Pimatic, MS Azure, certains syst\u00e8mes de signalisation, syst\u00e8mes d'alarme, l'industrie du Gaz, de l'\u00e9lectricit\u00e9 et bien plus encore. MQTT focntionne sur le principe de publication/abonnement (publish/subscribe) Fonctionnement C\u2019est quoi un broker MQTT ? Vous pouvez envoyer une commande pour contr\u00f4ler une sortie ou vous pouvez la lire \u00e0 partir d'un capteur et la publier. Dans Mqtt, il y a quelques concepts de base que vous devez comprendre : publier et souscrire des messages, des topics et des broker. Le premier concept est le syst\u00e8me de publication et d'abonnement. Qu'est-ce que cela signifie ? Cela signifie que le dispositif peut publier des messages \u00e0 vos autres dispositifs ou votre dispositif peut s'abonner \u00e0 un sujet particulier.Pour recevoir ces messages, par exemple, le dispositif 1 publie sur un sujet, le dispositif 2 s'abonne au m\u00eame sujet que le dispositif 1 publie. Ainsi, le dispositif 2 re\u00e7oit le message. Les messages sont les informations que vous souhaitez \u00e9changer entre vos appareils, qu'il s'agisse d'une commande ou de donn\u00e9es avec le syst\u00e8me de publication/abonnement. Vous pouvez faire \u00e0 peu pr\u00e8s tout ce que vous voulez dans vos projets de mission en mode autonome. Un autre concept important est celui des topics. Les topics sont la fa\u00e7on dont vous enregistrez l'int\u00e9r\u00eat pour les messages entrants ou je vais sp\u00e9cifier o\u00f9 vous voulez publier votre message. votre message. Les topics sont repr\u00e9sent\u00e9s par des cha\u00eenes de caract\u00e8res s\u00e9par\u00e9es par des barres obliques. Les slashs indiquent le niveau du sujet, voici un exemple si vous cr\u00e9ez maintenant un sujet pour une lampe dans votre propre bureau (home/office/lamp). Par exemple, si vous souhaitez allumer votre lampe dans votre bureau \u00e0 la maison, vous publieriez un message dans un topic en utilisant node-red disant on et votre machine sera abonn\u00e9e \u00e0 ce m\u00eame sujet. Elle recevra donc le message on et allumera finalement la lampe. Les topics sont sensibles \u00e0 la casse : Ce qui fait que home/office/lamp et home/office/Lamp sont diff\u00e9rents. Faites attention au terme borker : le broker est principalement responsable de la r\u00e9ception de tous les messages. Le broker MQTT est un equipement intermediaire entre le publisher et l'abon\u00e9e, il filtre les messages pour d\u00e9cider qui est int\u00e9ress\u00e9 et publie ensuite le message aux clients abonn\u00e9s. Il y a plusieurs brokers que vous pouvez utiliser. Nous allons utiliser le broker mosquito que vous installerez sur votre raspberry pi. Installer Mosquitto sur Linux ou Raspberry Pi D'abord mettons \u00e0 jour notre syst\u00e8me avant d\u2019installer Mosquito ce n'est pas obligatoire mais recommand\u00e9. sudo apt update && apt upgrade Maintenant installons Mosquitto sudo apt install mosquitto Pour faire des tests il faut installer Mosquitto client sudo apt-get install mosquitto-clients Ici nos tests se baseront justes sur Lunix, si jamais vous voulez installer Mosquito pour Rasperry Pi , installer mosquitto_sub, mosquitto_pub et mosquitto_passwVous voulez faire du mosquito en python? Alors je vous conseille python-mosquitto Exemple de server pour vos test: Server de test Pour verifier l'insatllation systemctl status mosquitto Installer Mosquitto sur Windows ou macOS Pour Windows ou macos je vous recommande de t\u00e9l\u00e9charger et installer via ce lien S\u00e9curis\u00e9 Mosquitto Maintenant on a Mosquitto qui fonctionne bien sur notre machine. Mais pas s\u00e9curis\u00e9, maintenant s\u00e9curisons le! Creons un user avec un password Pour cela tapez cd /etc/mosquitto Vous n'avez pas besoin de vous identifier tant que vous ne faite pas une gestion de votre domotique DIY car pour la domotique vous serez amen\u00e9 \u00e0 s\u00e9curiser vos appareils car sinon tout le monde peut acc\u00e9der \u00e0 appareils(chauffage, climatisation, motorisation de volets roulants.....). Donc le mieux c'est de les prot\u00e9ger avec un mot de passe. sudo mosquitto_passwd -c /etc/mosquitto/passwd USER_NAME Afin de limiter l'acc\u00e8s aux utilisateurs \u00e0 un compte, modifiez le fichier de configuration. Pour cela tapez la commande: sudo /etc/mosquitto/mosquitto.conf Ajoutez ceci \u00e0 la fin du fichier allow_anonymous false password_file /etc/mosquitto/passwordfile Maintenant on redemarre Mosquitto systemctl restart mosquitto Publier (envoyer) un message MQTT depuis le terminal Pour publier un message on utilise la commande mosquitto_pub et pour connaitre les options li\u00e9es \u00e0 la commande on utilise mosquitto_pub -help -h spcifie le nom du broker sur le quel on se connecte (ou IP) -t spcifie le topic sur lequel le message est publi\u00e9 -P spcifie le mot de passe (optionnel) -m spcifie le message \u00e0 envoyer qui peut \u00eatre une valeur ou un JSON. -u spcifie le nom d\u2019utilisateur (optionnel) -p spcifie le port, qui par d\u00e9faut est 1883 Pour plus d'information voir documentation Exemple : on se connecte au serveur -h localhost sur le Topic -t news/football et on publie le message -m j'ai gagn\u00e9 le ballon d'or. mosquitto_pub -h localhost -t news/football -m \"jai gagn\u00e9 le ballon d'or!\" Recevoir (souscrire) des messages Pour recevoir un message on utilise la commande mosquitto_sub et pour connaitre les options li\u00e9es \u00e0 la commande on utilise mosquitto_sub -help Ouvrez un second Terminal et ex\u00e9cutez la commande suivant. mosquitto_sub -h localhost -t news/football Exemple d'\u00e9change: \u00e0 gauche le publisher et \u00e0 droite le subscriber Conclusion Dans ce tutoriel nous avons parl\u00e9 des avantages et inconv\u00e9nients de MQTT. Nous avons install\u00e9 et test\u00e9 MQTT en utilisant le serveur mosquito sur Lunix. Pour ceux qui ont Windows ou macos nous les avons redirig\u00e9 vers la documentation de Mosquito. Rappelons que MQTT est un protocole TCP/IP utilis\u00e9 beaucoup dans l'IoT industriel.Il est le protocole parfait pour votre domotique et est super bien adapt\u00e9 au d\u00e9veloppement d\u2019objets connect\u00e9s vus sa rapidit\u00e9 et sa lergert\u00e9.","title":"MQTT"},{"location":"MQTT/#mqtt","text":"","title":"MQTT"},{"location":"MQTT/#introduction","text":"Utilis\u00e9 pour le transfert de Machine-to-Machine (M2M) , MQTT est consid\u00e9r\u00e9 comme l'un des principaux protocoles de messagerie de l'internet des objets, mais c\u00f4t\u00e9 industriel ( IoT) . Il est open source, l\u00e9ger ( en t\u00eate de messages de 2 octets ), faible utilisation de la bande passante du r\u00e9seau ( 93 fois plus rapides que le HTTP ), faible consommation d'\u00e9nergie ( 11 fois moins pour envoyer et 170 pour ne recevoir que le HTTP ) et fiable (m\u00e9canisme natif de Qos, acronyme de Quality of Service). Son autre avantage, c'est qu'il est extr\u00eamement facile \u00e0 mettre en \u0153uvre du c\u00f4t\u00e9 client. C'est donc la solution parfaite pour l'IoT. Attention cependant, fortement vuln\u00e9rable si certaines conditions de s\u00e9curit\u00e9 ne sont pas r\u00e9unies, comme l'absence de chiffrage sur la transmission & l'authentification (MQTT est capable d'\u00eatre d\u00e9ploy\u00e9 sans chiffrement TLS ou SSL.) Utilis\u00e9 par nombreux acteurs dans le monde Facebook, openstack, geospatial, Bosh, IBM, Adarfuit, EVERYTHING IoT, Google Home Assistant, Pimatic, MS Azure, certains syst\u00e8mes de signalisation, syst\u00e8mes d'alarme, l'industrie du Gaz, de l'\u00e9lectricit\u00e9 et bien plus encore. MQTT focntionne sur le principe de publication/abonnement (publish/subscribe)","title":"Introduction"},{"location":"MQTT/#fonctionnement","text":"","title":"Fonctionnement"},{"location":"MQTT/#cest-quoi-un-broker-mqtt","text":"Vous pouvez envoyer une commande pour contr\u00f4ler une sortie ou vous pouvez la lire \u00e0 partir d'un capteur et la publier. Dans Mqtt, il y a quelques concepts de base que vous devez comprendre : publier et souscrire des messages, des topics et des broker. Le premier concept est le syst\u00e8me de publication et d'abonnement. Qu'est-ce que cela signifie ? Cela signifie que le dispositif peut publier des messages \u00e0 vos autres dispositifs ou votre dispositif peut s'abonner \u00e0 un sujet particulier.Pour recevoir ces messages, par exemple, le dispositif 1 publie sur un sujet, le dispositif 2 s'abonne au m\u00eame sujet que le dispositif 1 publie. Ainsi, le dispositif 2 re\u00e7oit le message. Les messages sont les informations que vous souhaitez \u00e9changer entre vos appareils, qu'il s'agisse d'une commande ou de donn\u00e9es avec le syst\u00e8me de publication/abonnement. Vous pouvez faire \u00e0 peu pr\u00e8s tout ce que vous voulez dans vos projets de mission en mode autonome. Un autre concept important est celui des topics. Les topics sont la fa\u00e7on dont vous enregistrez l'int\u00e9r\u00eat pour les messages entrants ou je vais sp\u00e9cifier o\u00f9 vous voulez publier votre message. votre message. Les topics sont repr\u00e9sent\u00e9s par des cha\u00eenes de caract\u00e8res s\u00e9par\u00e9es par des barres obliques. Les slashs indiquent le niveau du sujet, voici un exemple si vous cr\u00e9ez maintenant un sujet pour une lampe dans votre propre bureau (home/office/lamp). Par exemple, si vous souhaitez allumer votre lampe dans votre bureau \u00e0 la maison, vous publieriez un message dans un topic en utilisant node-red disant on et votre machine sera abonn\u00e9e \u00e0 ce m\u00eame sujet. Elle recevra donc le message on et allumera finalement la lampe. Les topics sont sensibles \u00e0 la casse : Ce qui fait que home/office/lamp et home/office/Lamp sont diff\u00e9rents. Faites attention au terme borker : le broker est principalement responsable de la r\u00e9ception de tous les messages. Le broker MQTT est un equipement intermediaire entre le publisher et l'abon\u00e9e, il filtre les messages pour d\u00e9cider qui est int\u00e9ress\u00e9 et publie ensuite le message aux clients abonn\u00e9s. Il y a plusieurs brokers que vous pouvez utiliser. Nous allons utiliser le broker mosquito que vous installerez sur votre raspberry pi.","title":"C\u2019est quoi un broker MQTT ?"},{"location":"MQTT/#installer-mosquitto-sur-linux-ou-raspberry-pi","text":"D'abord mettons \u00e0 jour notre syst\u00e8me avant d\u2019installer Mosquito ce n'est pas obligatoire mais recommand\u00e9. sudo apt update && apt upgrade Maintenant installons Mosquitto sudo apt install mosquitto Pour faire des tests il faut installer Mosquitto client sudo apt-get install mosquitto-clients Ici nos tests se baseront justes sur Lunix, si jamais vous voulez installer Mosquito pour Rasperry Pi , installer mosquitto_sub, mosquitto_pub et mosquitto_passwVous voulez faire du mosquito en python? Alors je vous conseille python-mosquitto Exemple de server pour vos test: Server de test Pour verifier l'insatllation systemctl status mosquitto","title":"Installer Mosquitto sur Linux ou Raspberry Pi"},{"location":"MQTT/#installer-mosquitto-sur-windows-ou-macos","text":"Pour Windows ou macos je vous recommande de t\u00e9l\u00e9charger et installer via ce lien","title":"Installer Mosquitto sur Windows ou macOS"},{"location":"MQTT/#securise-mosquitto","text":"Maintenant on a Mosquitto qui fonctionne bien sur notre machine. Mais pas s\u00e9curis\u00e9, maintenant s\u00e9curisons le! Creons un user avec un password Pour cela tapez cd /etc/mosquitto Vous n'avez pas besoin de vous identifier tant que vous ne faite pas une gestion de votre domotique DIY car pour la domotique vous serez amen\u00e9 \u00e0 s\u00e9curiser vos appareils car sinon tout le monde peut acc\u00e9der \u00e0 appareils(chauffage, climatisation, motorisation de volets roulants.....). Donc le mieux c'est de les prot\u00e9ger avec un mot de passe. sudo mosquitto_passwd -c /etc/mosquitto/passwd USER_NAME Afin de limiter l'acc\u00e8s aux utilisateurs \u00e0 un compte, modifiez le fichier de configuration. Pour cela tapez la commande: sudo /etc/mosquitto/mosquitto.conf Ajoutez ceci \u00e0 la fin du fichier allow_anonymous false password_file /etc/mosquitto/passwordfile Maintenant on redemarre Mosquitto systemctl restart mosquitto","title":"S\u00e9curis\u00e9 Mosquitto"},{"location":"MQTT/#publier-envoyer-un-message-mqtt-depuis-le-terminal","text":"Pour publier un message on utilise la commande mosquitto_pub et pour connaitre les options li\u00e9es \u00e0 la commande on utilise mosquitto_pub -help -h spcifie le nom du broker sur le quel on se connecte (ou IP) -t spcifie le topic sur lequel le message est publi\u00e9 -P spcifie le mot de passe (optionnel) -m spcifie le message \u00e0 envoyer qui peut \u00eatre une valeur ou un JSON. -u spcifie le nom d\u2019utilisateur (optionnel) -p spcifie le port, qui par d\u00e9faut est 1883 Pour plus d'information voir documentation Exemple : on se connecte au serveur -h localhost sur le Topic -t news/football et on publie le message -m j'ai gagn\u00e9 le ballon d'or. mosquitto_pub -h localhost -t news/football -m \"jai gagn\u00e9 le ballon d'or!\"","title":"Publier (envoyer) un message MQTT depuis le terminal"},{"location":"MQTT/#recevoir-souscrire-des-messages","text":"Pour recevoir un message on utilise la commande mosquitto_sub et pour connaitre les options li\u00e9es \u00e0 la commande on utilise mosquitto_sub -help Ouvrez un second Terminal et ex\u00e9cutez la commande suivant. mosquitto_sub -h localhost -t news/football Exemple d'\u00e9change: \u00e0 gauche le publisher et \u00e0 droite le subscriber","title":"Recevoir (souscrire) des messages"},{"location":"MQTT/#conclusion","text":"Dans ce tutoriel nous avons parl\u00e9 des avantages et inconv\u00e9nients de MQTT. Nous avons install\u00e9 et test\u00e9 MQTT en utilisant le serveur mosquito sur Lunix. Pour ceux qui ont Windows ou macos nous les avons redirig\u00e9 vers la documentation de Mosquito. Rappelons que MQTT est un protocole TCP/IP utilis\u00e9 beaucoup dans l'IoT industriel.Il est le protocole parfait pour votre domotique et est super bien adapt\u00e9 au d\u00e9veloppement d\u2019objets connect\u00e9s vus sa rapidit\u00e9 et sa lergert\u00e9.","title":"Conclusion"},{"location":"Ubuntu-Oh-my-zsh/","text":"Oh My Zsh Introduction Humm, disons que vous en avez marre de la mani\u00e8re dont votre terminal looks like alors Oh My Zsh est l'une des solutions les plus utilis\u00e9es. Il est open source. Il est super personnalisable. Il contient des milliers de fonctions utiles. Il est OH MY ZSH . Fonctionnement Installation Comme nous voulons installer un nouvel utilitaire sur notre syst\u00e8me, nous devons d'abord mettre \u00e0 jour notre ordinateur pour le pr\u00e9parer \u00e0 ex\u00e9cuter ce dernier. sudo apt-get update Ensuite installer zsh avec la commande suivante sudo apt-get install zsh Pour v\u00e9rifier la version et aussi que c'est bien install\u00e9, tapez la commande. zsh --version Maintenant votre machine est pr\u00eate \u00e0 installer Oh My Zsh sh -c \"$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)\" Apr\u00e8s ceci, vous avez Oh My Zsh bien install\u00e9, mais sa meilleure utilisation est l'auto-comp\u00e9tition, l'historique et le highlighting pour cela, personnalisons Oh My Zsh. Personnalisation T\u00e9l\u00e9charger zsh-autosuggestions avec la commande suivante git clone https://github.com/zsh-users/zsh-autosuggestions.git $ZSH_CUSTOM/plugins/zsh-autosuggestions T\u00e9l\u00e9charger zsh-syntax-highlighting avec la commande suivante git clone https://github.com/zsh-users/zsh-syntax-highlighting.git $ZSH_CUSTOM/plugins/zsh-syntax-highlighting Modifier le fichier ~/.zshrc ainsi, trouver l'emplacement des plugins pour ajouter le autosuggestions et le highlighting comme ceci plugins=( git vscode zsh-autosuggestions zsh-syntax-highlighting ) Conclusion Congratulations!! Vous avez un terminal maintenant. Bon coding time. Pour plus de fun fonctionalit\u00e9s visitez ce site OH My Zsh","title":"Oh My Zsh"},{"location":"Ubuntu-Oh-my-zsh/#oh-my-zsh","text":"","title":"Oh My Zsh"},{"location":"Ubuntu-Oh-my-zsh/#introduction","text":"Humm, disons que vous en avez marre de la mani\u00e8re dont votre terminal looks like alors Oh My Zsh est l'une des solutions les plus utilis\u00e9es. Il est open source. Il est super personnalisable. Il contient des milliers de fonctions utiles. Il est OH MY ZSH .","title":"Introduction"},{"location":"Ubuntu-Oh-my-zsh/#fonctionnement","text":"","title":"Fonctionnement"},{"location":"Ubuntu-Oh-my-zsh/#installation","text":"Comme nous voulons installer un nouvel utilitaire sur notre syst\u00e8me, nous devons d'abord mettre \u00e0 jour notre ordinateur pour le pr\u00e9parer \u00e0 ex\u00e9cuter ce dernier. sudo apt-get update Ensuite installer zsh avec la commande suivante sudo apt-get install zsh Pour v\u00e9rifier la version et aussi que c'est bien install\u00e9, tapez la commande. zsh --version Maintenant votre machine est pr\u00eate \u00e0 installer Oh My Zsh sh -c \"$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)\" Apr\u00e8s ceci, vous avez Oh My Zsh bien install\u00e9, mais sa meilleure utilisation est l'auto-comp\u00e9tition, l'historique et le highlighting pour cela, personnalisons Oh My Zsh.","title":"Installation"},{"location":"Ubuntu-Oh-my-zsh/#personnalisation","text":"T\u00e9l\u00e9charger zsh-autosuggestions avec la commande suivante git clone https://github.com/zsh-users/zsh-autosuggestions.git $ZSH_CUSTOM/plugins/zsh-autosuggestions T\u00e9l\u00e9charger zsh-syntax-highlighting avec la commande suivante git clone https://github.com/zsh-users/zsh-syntax-highlighting.git $ZSH_CUSTOM/plugins/zsh-syntax-highlighting Modifier le fichier ~/.zshrc ainsi, trouver l'emplacement des plugins pour ajouter le autosuggestions et le highlighting comme ceci plugins=( git vscode zsh-autosuggestions zsh-syntax-highlighting )","title":"Personnalisation"},{"location":"Ubuntu-Oh-my-zsh/#conclusion","text":"Congratulations!! Vous avez un terminal maintenant. Bon coding time. Pour plus de fun fonctionalit\u00e9s visitez ce site OH My Zsh","title":"Conclusion"},{"location":"Ubuntu-commandes/","text":"Ubuntu utilities Install curl pour Ubuntu Commencez par mettre \u00e0 jour le syst\u00e8me : sudo apt update sudo apt upgrade Puis tapez la commande suivante avec apt ou apt-get qui installera la derni\u00e8re version de curl. sudo apt install curl Install JQ pour Ubuntu \ud83e\udd14 Il vous arrive de fois l'envie de formater la sortie standard de votre terminal afin que le output soit plus lisible. Ehhh bhen \"jq\" permet de faire ceci. En gros un programme jq est un \"filtre\": il prend une entr\u00e9e et produit une sortie. tutorial ici Il faut donc l'installer avec: sudo apt-get install jq Exemple: Sans jq Avec jq","title":"Ubuntu utilities"},{"location":"Ubuntu-commandes/#ubuntu-utilities","text":"","title":"Ubuntu utilities"},{"location":"Ubuntu-commandes/#install-curl-pour-ubuntu","text":"Commencez par mettre \u00e0 jour le syst\u00e8me : sudo apt update sudo apt upgrade Puis tapez la commande suivante avec apt ou apt-get qui installera la derni\u00e8re version de curl. sudo apt install curl","title":"Install curl pour Ubuntu"},{"location":"Ubuntu-commandes/#install-jq-pour-ubuntu","text":"\ud83e\udd14 Il vous arrive de fois l'envie de formater la sortie standard de votre terminal afin que le output soit plus lisible. Ehhh bhen \"jq\" permet de faire ceci. En gros un programme jq est un \"filtre\": il prend une entr\u00e9e et produit une sortie. tutorial ici Il faut donc l'installer avec: sudo apt-get install jq","title":"Install JQ pour Ubuntu"},{"location":"alerte_manager/","text":"Pour configurer un alert manager afin d'envoyer des alertes sur Slack avec Docker, voici les \u00e9tapes g\u00e9n\u00e9rales \u00e0 suivre : Cr\u00e9ez un webhook sur Slack pour recevoir les alertes. Pour cela, allez sur Slack, cliquez sur votre nom en haut \u00e0 gauche, puis sur \u00ab Administration des applications \u00bb. Ensuite, recherchez \u00ab Incoming Webhooks \u00bb et ajoutez un nouveau webhook. Copiez le lien d'URL g\u00e9n\u00e9r\u00e9. Ajoutez la configuration de l'alert manager dans un fichier YAML. Par exemple, cr\u00e9ez un fichier nomm\u00e9 alertmanager.yml avec le contenu suivant : global: slack_api_url: <le lien d'URL de votre webhook Slack> route: group_by: ['alertname'] group_wait: 30s group_interval: 5m repeat_interval: 4h receivers: - name: slack slack_configs: - channel: '#votre_channel_slack' send_resolved: true Ajoutez les variables d'environnement \u00e0 votre fichier docker-compose.yml pour lier votre configuration \u00e0 votre alert manager : alertmanager: image: prom/alertmanager command: - \"--config.file=/etc/alertmanager/config.yml\" ports: - \"9093:9093\" volumes: - ./alertmanager.yml:/etc/alertmanager/config.yml environment: - SLACK_API_URL=<le lien d'URL de votre webhook Slack> D\u00e9marrez votre alert manager avec la commande suivante : docker-compose up -d alertmanager Pour envoyer une alerte vers Slack, utilisez l'API REST d'Alertmanager. Par exemple, ex\u00e9cutez la commande suivante pour simuler une alerte : echo \"Test alert\" | docker run --rm -i quay.io/prometheus/alertmanager:latest amtool alert --config.file=/etc/alertmanager/config.yml --alertmanager.url=http://alertmanager:9093/api/v2/alerts L'alerte sera envoy\u00e9e sur Slack dans le canal sp\u00e9cifi\u00e9. Vous pouvez \u00e9galement personnaliser la configuration de l'alerte pour sp\u00e9cifier le niveau d'alerte, le destinataire, etc.","title":"Alerte manager"},{"location":"apache-benchmark/","text":"ApacheBench ApacheBench (ab est le vrai nom du fichier programme ) est un programme informatique en ligne de commande \u00e0 thread unique utilis\u00e9 pour l'analyse comparative (mesure des performances) des serveurs Web HTTP . Un peu d'histoire? \u00c0 l'origine, il \u00e9tait utilis\u00e9 pour tester le serveur HTTP Apache , mais il est suffisamment g\u00e9n\u00e9rique pour tester n'importe quel serveur Web prenant en charge les versions de protocole HTTP/1.0 ou HTTP/1.1. L' ab outil est \u00e9crit en C et il est fourni avec la distribution source standard d'Apache, et comme le serveur Web Apache lui-m\u00eame, il s'agit d'un logiciel libre, open source et distribu\u00e9 selon les termes de la licence Apache source . Fonctionnement Dans cette session nous ne parlerons que de certaines fonctionnalit\u00e9s, comment installer ab, un exemple d'utilisation et pourquoi faire une telle t\u00e2che. Fonctionnalit\u00e9s d'ApacheBench Un logiciel open source, donc disponible gratuitement. Un simple programme informatique en ligne de commande. Un tester de charge et de performance uniquement pour le serveur Web - HTTP ou HTTPS. Un outil ind\u00e9pendant de votre plate-forme. On peut l'uitliser sur Linux, sur Windows ou MacOs. Installation Pour installer apache2-utils tapez la commande sudo apt-get install apache2-utils Notez que cela n'a pas besoin d'\u00eatre install\u00e9 sur le m\u00eame serveur sur lequel vous souhaitez ex\u00e9cuter le test. Vous pouvez l'installer m\u00eame sur votre bureau local (pour moi Ubuntu) et ex\u00e9cuter le test vers une URL sp\u00e9cifique Utilisation ab -c 100 -n 500 -r https://mon-site.com/ -c: le nombre de requ\u00eates multiples \u00e0 ex\u00e9cuter \u00e0 la fois. -n: le nombre de requ\u00eates \u00e0 effectuer pour la session de benchmarking. -r: signifie ne quitte pas en cas d'erreur de r\u00e9ception de socket. Dans notre cas, la requ\u00eate fera simultan\u00e9ment 100 requ\u00eates/seconde et en fera au total 500. Pourquoi stresser son site? Dr\u00f4le hein ? Mais je suis s\u00e9rieuse il faut simuler un grand nombre de flux d'utilisation de son site pour \u00e9viter que son site ne se plante. Pour cela vous pouvez utiliser l'outil de test des performances du serveur HTTP Apache Pour plus d'info apache-bench-docs Conclusion Nous arrivons \u00e0 la fin de notre ApacheBench tuto \ud83d\ude01, je vous invite donc de voir ce article. Car, ceci n'est qu'une introduction \u00e0 ApacheBench, pour plus d'informations visitez le site ApacheBench .","title":"ApacheBench"},{"location":"apache-benchmark/#apachebench","text":"ApacheBench (ab est le vrai nom du fichier programme ) est un programme informatique en ligne de commande \u00e0 thread unique utilis\u00e9 pour l'analyse comparative (mesure des performances) des serveurs Web HTTP . Un peu d'histoire? \u00c0 l'origine, il \u00e9tait utilis\u00e9 pour tester le serveur HTTP Apache , mais il est suffisamment g\u00e9n\u00e9rique pour tester n'importe quel serveur Web prenant en charge les versions de protocole HTTP/1.0 ou HTTP/1.1. L' ab outil est \u00e9crit en C et il est fourni avec la distribution source standard d'Apache, et comme le serveur Web Apache lui-m\u00eame, il s'agit d'un logiciel libre, open source et distribu\u00e9 selon les termes de la licence Apache source .","title":"ApacheBench"},{"location":"apache-benchmark/#fonctionnement","text":"Dans cette session nous ne parlerons que de certaines fonctionnalit\u00e9s, comment installer ab, un exemple d'utilisation et pourquoi faire une telle t\u00e2che.","title":"Fonctionnement"},{"location":"apache-benchmark/#fonctionnalites-dapachebench","text":"Un logiciel open source, donc disponible gratuitement. Un simple programme informatique en ligne de commande. Un tester de charge et de performance uniquement pour le serveur Web - HTTP ou HTTPS. Un outil ind\u00e9pendant de votre plate-forme. On peut l'uitliser sur Linux, sur Windows ou MacOs.","title":"Fonctionnalit\u00e9s d'ApacheBench"},{"location":"apache-benchmark/#installation","text":"Pour installer apache2-utils tapez la commande sudo apt-get install apache2-utils Notez que cela n'a pas besoin d'\u00eatre install\u00e9 sur le m\u00eame serveur sur lequel vous souhaitez ex\u00e9cuter le test. Vous pouvez l'installer m\u00eame sur votre bureau local (pour moi Ubuntu) et ex\u00e9cuter le test vers une URL sp\u00e9cifique","title":"Installation"},{"location":"apache-benchmark/#utilisation","text":"ab -c 100 -n 500 -r https://mon-site.com/ -c: le nombre de requ\u00eates multiples \u00e0 ex\u00e9cuter \u00e0 la fois. -n: le nombre de requ\u00eates \u00e0 effectuer pour la session de benchmarking. -r: signifie ne quitte pas en cas d'erreur de r\u00e9ception de socket. Dans notre cas, la requ\u00eate fera simultan\u00e9ment 100 requ\u00eates/seconde et en fera au total 500.","title":"Utilisation"},{"location":"apache-benchmark/#pourquoi-stresser-son-site","text":"Dr\u00f4le hein ? Mais je suis s\u00e9rieuse il faut simuler un grand nombre de flux d'utilisation de son site pour \u00e9viter que son site ne se plante. Pour cela vous pouvez utiliser l'outil de test des performances du serveur HTTP Apache Pour plus d'info apache-bench-docs","title":"Pourquoi stresser son site?"},{"location":"apache-benchmark/#conclusion","text":"Nous arrivons \u00e0 la fin de notre ApacheBench tuto \ud83d\ude01, je vous invite donc de voir ce article. Car, ceci n'est qu'une introduction \u00e0 ApacheBench, pour plus d'informations visitez le site ApacheBench .","title":"Conclusion"},{"location":"callback-function/","text":"Fonction callback ou anonyme Callback fonction \"A\" est une fonction callback si elle prend en argument une fonction \"B\" et elle appelle \"B\" dans sa d\u00e9finition. Exemple Entr\u00e9e // function function greet(name, callback) { console.log('Salut' + ' ' + name); callback(); } // callback function function callMe() { console.log('Je suis la fonction callback'); } // passing function as an argument greet('Ousmane', callMe); Sortie Salut Ousmane Je suis la fonction callback Fonction anonyme Une fonction est dite anonyme si elle n'a pas d'identit\u00e9, c'est-\u00e0-dire qu'elle n'a pas de nom. Exemple let x = function () { console.log('C'est une fonction anonyme'); } ; X(); Les fonctions anonymes peuvent s'executer toutes seules, il suffit de mettre, en la definissant une parenth\u00e8se \u00e0 la fin \"(notre_fuction)();\" . Exemple (function() { console.log('Hello'); })();","title":"Fonction callback ou anonyme"},{"location":"callback-function/#fonction-callback-ou-anonyme","text":"","title":"Fonction callback ou anonyme"},{"location":"callback-function/#callback-fonction","text":"\"A\" est une fonction callback si elle prend en argument une fonction \"B\" et elle appelle \"B\" dans sa d\u00e9finition. Exemple Entr\u00e9e // function function greet(name, callback) { console.log('Salut' + ' ' + name); callback(); } // callback function function callMe() { console.log('Je suis la fonction callback'); } // passing function as an argument greet('Ousmane', callMe); Sortie Salut Ousmane Je suis la fonction callback","title":"Callback fonction"},{"location":"callback-function/#fonction-anonyme","text":"Une fonction est dite anonyme si elle n'a pas d'identit\u00e9, c'est-\u00e0-dire qu'elle n'a pas de nom. Exemple let x = function () { console.log('C'est une fonction anonyme'); } ; X(); Les fonctions anonymes peuvent s'executer toutes seules, il suffit de mettre, en la definissant une parenth\u00e8se \u00e0 la fin \"(notre_fuction)();\" . Exemple (function() { console.log('Hello'); })();","title":"Fonction anonyme"},{"location":"cockpit/","text":"Cockpit Introduction Celui qui vous aide \u00e0 piloter vos machines sans avoir \u00e0 connaitre toutes les commandes Lunix. Vous avez envie d'administrer vos machines sans connaitre de commandes Lunix, vous avez envie de vous amuser sur un interface web sans passer par un terminal sur la machine ou encore avez envie d'utiliser un terminal sur votre navigateur sans revenir sur votre terminal en local? Alors utiliser cockpit!l. Focntionnement Cockpit est une interface graphique web pour serveurs, destin\u00e9e \u00e0 tous(debutants, confirm\u00e9 et administrateur systeme sous Lunix), notamment ceux qui sont : Gr\u00e2ce \u00e0 Cockpit toute une \u00e9quipe d'administrateurs peut g\u00e9rer un syst\u00e8me de la mani\u00e8re la plus simple. Avec cockpit vous pouvez verifier: vos containers, votre CPU, votre RAM, disque dur,... Installation sur Ubuntu L'installation est l'une des plus simple il suffit de taper la commande sudo apt install cockpit D\u00e9marrage de cockpit Une fois l'installation termin\u00e9e lancer votre cockpit avec la commande sudo service cockpit start interface de cockpit V\u00e9rification du status Une fois lanc\u00e9 vous pouvez v\u00e9rifier son status avec la command: sudo service cockpit status Docker et cockpit Vous avez la possibilit\u00e9 de v\u00e9rifier que vos containers sont entrains de tourner ou sont down. Il se comporte comme portainer mais en plus avanc\u00e9 car il contient des graphes et beacoups d'autres outils. Pour cela installer sur votre machine le docker-cockpit. sudo apt-get -y install cockpit-docker Redemarrer le socket docker pour appliquer les changements sudo systemctl restart cockpit.socket interface de cockpit Cockpit et metrics Lecture et diffusion de donn\u00e9es de m\u00e9triques. Les m\u00e9triques concernant le syst\u00e8me peuvent \u00eatre extraites de plusieurs sources \u00e0 l'aide de cockpit.metrics(). On peut exploiter les donn\u00e9es des metrics avec les fonctions cockpit.series() et cockpit.grid(). metrics = cockpit.metrics(intervalle, options, cache) Pour plus d'informations, je vous invite \u00e0 visitez le site oficiel de cockpit Conclusion Vous pouvez d\u00e9sormais g\u00e9rer facilement les conteneurs Docker \u00e0 partir de votre navigateur Web avec une interface facile \u00e0 utiliser ! Vous pouvez \u00e9galement monitorer votre machine avec cockpit sans souci ! Sources: Site officielle de cockpit Hostwinds logo","title":"Cockpit"},{"location":"cockpit/#cockpit","text":"","title":"Cockpit"},{"location":"cockpit/#introduction","text":"Celui qui vous aide \u00e0 piloter vos machines sans avoir \u00e0 connaitre toutes les commandes Lunix. Vous avez envie d'administrer vos machines sans connaitre de commandes Lunix, vous avez envie de vous amuser sur un interface web sans passer par un terminal sur la machine ou encore avez envie d'utiliser un terminal sur votre navigateur sans revenir sur votre terminal en local? Alors utiliser cockpit!l.","title":"Introduction"},{"location":"cockpit/#focntionnement","text":"Cockpit est une interface graphique web pour serveurs, destin\u00e9e \u00e0 tous(debutants, confirm\u00e9 et administrateur systeme sous Lunix), notamment ceux qui sont : Gr\u00e2ce \u00e0 Cockpit toute une \u00e9quipe d'administrateurs peut g\u00e9rer un syst\u00e8me de la mani\u00e8re la plus simple. Avec cockpit vous pouvez verifier: vos containers, votre CPU, votre RAM, disque dur,...","title":"Focntionnement"},{"location":"cockpit/#installation-sur-ubuntu","text":"L'installation est l'une des plus simple il suffit de taper la commande sudo apt install cockpit","title":"Installation sur Ubuntu"},{"location":"cockpit/#demarrage-de-cockpit","text":"Une fois l'installation termin\u00e9e lancer votre cockpit avec la commande sudo service cockpit start interface de cockpit","title":"D\u00e9marrage de cockpit"},{"location":"cockpit/#verification-du-status","text":"Une fois lanc\u00e9 vous pouvez v\u00e9rifier son status avec la command: sudo service cockpit status","title":"V\u00e9rification du status"},{"location":"cockpit/#docker-et-cockpit","text":"Vous avez la possibilit\u00e9 de v\u00e9rifier que vos containers sont entrains de tourner ou sont down. Il se comporte comme portainer mais en plus avanc\u00e9 car il contient des graphes et beacoups d'autres outils. Pour cela installer sur votre machine le docker-cockpit. sudo apt-get -y install cockpit-docker Redemarrer le socket docker pour appliquer les changements sudo systemctl restart cockpit.socket interface de cockpit","title":"Docker et cockpit"},{"location":"cockpit/#cockpit-et-metrics","text":"Lecture et diffusion de donn\u00e9es de m\u00e9triques. Les m\u00e9triques concernant le syst\u00e8me peuvent \u00eatre extraites de plusieurs sources \u00e0 l'aide de cockpit.metrics(). On peut exploiter les donn\u00e9es des metrics avec les fonctions cockpit.series() et cockpit.grid(). metrics = cockpit.metrics(intervalle, options, cache) Pour plus d'informations, je vous invite \u00e0 visitez le site oficiel de cockpit","title":"Cockpit et metrics"},{"location":"cockpit/#conclusion","text":"Vous pouvez d\u00e9sormais g\u00e9rer facilement les conteneurs Docker \u00e0 partir de votre navigateur Web avec une interface facile \u00e0 utiliser ! Vous pouvez \u00e9galement monitorer votre machine avec cockpit sans souci ! Sources: Site officielle de cockpit Hostwinds logo","title":"Conclusion"},{"location":"docker-/","text":"Introduction \u00e0 Docker Docker est une plate-forme en tant que produits de service (Paas i.e platforms as a service) qui utilisent la visualisation au niveau du syst\u00e8me d'exploitation pour fournir des logiciels dans des packages appel\u00e9s conteneurs. \ud83e\udd14 Bon d'autre part j'ai envie de dire que c'est comme un bateau qui contient beaucoup de conteneurs, ils sont sur le m\u00eame beateau, mais chacun est isol\u00e9 des autres selon son contenu. Ils peuvent communiquer entre eux par des canaux bien d\u00e9finis (le r\u00e9seau => network). Ils appartient au m\u00eame noyau de syst\u00e8me d'exploitation et utilisent donc moins de ressources qu'une machine virtuelle. Docker est un syst\u00e8me d'exploitation pour conteneurs. Pourquoi utiliser Docker? \ud83d\ude32 Tu nous le demande? bon bahh on ne sait pas Docker permet: D'envoyer du code plus rapidement De standardiser les op\u00e9rations des applications De migrer ais\u00e9ment du code De faire des \u00e9conomies en am\u00e9liorant l'utilisation des ressources. Avec Docker, vous obtenez un objet unique que vous pouvez ex\u00e9cuter n'importe o\u00f9 de mani\u00e8re fiable. Gr\u00e2ce \u00e0 sa syntaxe simple, Docker vous conf\u00e8re le contr\u00f4le total. Comme Docker est adopt\u00e9 \u00e0 grande \u00e9chelle, il s'accompagne d'un solide \u00e9cosyst\u00e8me d'outils et d'applications standard. Conteneurs C'est une image en ex\u00e9cution. Il permet de regroupe le code et toutes ses d\u00e9pendances Il facilite l'ex\u00e9cution rapide et de mani\u00e8re fiable d'un environnement informatique \u00e0 un autre des applications. Il poss\u00e8de la copie du syst\u00e8me de fichiers de l'image, ainsi que la capacit\u00e9 de lancer des processus. En gros, c'est un OS, avec lequel vous pouvez interagir. Exemple docker run --name test -it debian Pour savoir quels sont les actions qu'on peut effectuer lancez docker run --help . Plus d'info sur les conteneurs Docker container --help Images C'est un ensemble d'instructions pour cr\u00e9er un conteneur pouvant s'ex\u00e9cuter. Elle repr\u00e9sente le syst\u00e8me de fichiers, sans les processus... C'est un ensemble de couche(layers). Les images sont \u00e9galement le point de d\u00e9part pour quiconque utilise Docker pour la premi\u00e8re fois. Exemple docker pull debian Docker image --help Plus d'info sur le site de Docker Une petite image? Alpine Linux est une distribution Linux. Qui est leg\u00e8re et est parfaite pour les petits syst\u00e8me d'exploitation l'image ne fait que 5 Mo. docker pull alpine:3.15.0 Volumes OHHHH \ud83e\udd2f on a entendu dire que c'est casse t\u00eate? Mais non c'est un sujet simple je vous explique: C'est la mani\u00e8re la plus s\u00fbre de cr\u00e9er et d'utiliser les donn\u00e9es d'un conteneur. Fonctionnement C'est un endroit qu'on cr\u00e9e pour pr\u00e9server les donn\u00e9es g\u00e9n\u00e9r\u00e9es par le conteneur en cours d'ex\u00e9cution. Ils sont stock\u00e9s sur l'h\u00f4te, ind\u00e9pendamment du cycle de vie du conteneur. Cela permet aux utilisateurs de sauvegarder facilement des donn\u00e9es et de partager des syst\u00e8mes de fichiers entre les conteneurs. Avantages Ils sont plus faciles \u00e0 sauvegarder ou \u00e0 migrer. z- La gestion est facile \u00e0 l'aide des commandes Docker CLI ou de l'API Docker. Ils fonctionnent sur les conteneurs Linux et Windows. Ils peuvent \u00eatre partag\u00e9s de mani\u00e8re plus s\u00fbre entre plusieurs conteneurs. Les pilotes de volume vous permettent de stocker des volumes sur des h\u00f4tes distants ou des fournisseurs de cloud, de chiffrer le contenu des volumes ou d'ajouter d'autres fonctionnalit\u00e9s. Les nouveaux volumes peuvent avoir leur contenu pr\u00e9-rempli par un conteneur. Cr\u00e9eation d'un volume docker volume create [OPTIONS] [VOLUME] On peut aussi cr\u00e9er un volume avec la commande docker run --mount source=myvol2,target=/app ou docker run -v myvol2:/app Pour savoir tout ce qu'on peut faire avec les volumes taper la commande docker volume --help Dockerfile Ce fichier permet de cr\u00e9er une image custom, au lieu de le faire en ligne de commande, on peut le faire dans un fichier dont la maintenance est facile. FROM python:3.7-alpine WORKDIR /code ENV FLASK_APP=app.py ENV FLASK_RUN_HOST=0.0.0.0 RUN apk add --no-cache gcc musl-dev linux-headers COPY requirements.txt requirements.txt RUN pip install -r requirements.txt EXPOSE 5000 COPY . . CMD [\"flask\", \"run\"] Docker-compose Installation Vous trouverez ici tout ce qu'il vous faut sur Docker-compose sudo curl -L \"https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose Appliquez les autorisations ex\u00e9cutables au binaire ici la doc sudo chmod +x /usr/local/bin/docker-compose Utilisation Rappelons que ce fichier contient le docker run commande Exemple de docker-compose version: \"3.9\" services: web: build: . ports: - \"5000:5000\" redis: image: \"redis:alpine\" Commandes utiles Container Management CLIs docker run image : cr\u00e9e le container et le lance i.e. **docker run postgres:alpine3.16** docker start container: lance le container docker stop container: arr\u00eate le container docker kill container: tue le container docker restart container: arr\u00eate le container et le lance docker pause container: suspend le container docker rm container: detruit le container Inspection du conteneur docker ps : lister l'ensemble des container en cours d'execution docker ps -a: lister tous les containers docker logs [-f] container: lister les logs Interagir avec le conteneur et images docker attach container : Rejoint le container en cours, mais s'il est arr\u00eat\u00e9, il tue le container en cours docker exec container args..: lancer un container docker images: lister toutes les images docker pull repo[:tag]: puller une image du registry docker push repo[:tag]: pusher une image du registry docker images: lister toutes les images Conclusion Ce tutoriel arrive \u00e0 sa fin, pour plus d'informations, je vous recommande la documentation de Docker dont le lien est en bas dans les ressources. Ou sur les tutoriels techniques de SoowCode. Sources : Docker cheat sheet Docker","title":"Docker"},{"location":"docker-/#introduction-a-docker","text":"Docker est une plate-forme en tant que produits de service (Paas i.e platforms as a service) qui utilisent la visualisation au niveau du syst\u00e8me d'exploitation pour fournir des logiciels dans des packages appel\u00e9s conteneurs. \ud83e\udd14 Bon d'autre part j'ai envie de dire que c'est comme un bateau qui contient beaucoup de conteneurs, ils sont sur le m\u00eame beateau, mais chacun est isol\u00e9 des autres selon son contenu. Ils peuvent communiquer entre eux par des canaux bien d\u00e9finis (le r\u00e9seau => network). Ils appartient au m\u00eame noyau de syst\u00e8me d'exploitation et utilisent donc moins de ressources qu'une machine virtuelle. Docker est un syst\u00e8me d'exploitation pour conteneurs. Pourquoi utiliser Docker? \ud83d\ude32 Tu nous le demande? bon bahh on ne sait pas Docker permet: D'envoyer du code plus rapidement De standardiser les op\u00e9rations des applications De migrer ais\u00e9ment du code De faire des \u00e9conomies en am\u00e9liorant l'utilisation des ressources. Avec Docker, vous obtenez un objet unique que vous pouvez ex\u00e9cuter n'importe o\u00f9 de mani\u00e8re fiable. Gr\u00e2ce \u00e0 sa syntaxe simple, Docker vous conf\u00e8re le contr\u00f4le total. Comme Docker est adopt\u00e9 \u00e0 grande \u00e9chelle, il s'accompagne d'un solide \u00e9cosyst\u00e8me d'outils et d'applications standard.","title":"Introduction \u00e0 Docker"},{"location":"docker-/#conteneurs","text":"C'est une image en ex\u00e9cution. Il permet de regroupe le code et toutes ses d\u00e9pendances Il facilite l'ex\u00e9cution rapide et de mani\u00e8re fiable d'un environnement informatique \u00e0 un autre des applications. Il poss\u00e8de la copie du syst\u00e8me de fichiers de l'image, ainsi que la capacit\u00e9 de lancer des processus. En gros, c'est un OS, avec lequel vous pouvez interagir.","title":"Conteneurs"},{"location":"docker-/#exemple","text":"docker run --name test -it debian Pour savoir quels sont les actions qu'on peut effectuer lancez docker run --help . Plus d'info sur les conteneurs","title":"Exemple"},{"location":"docker-/#docker-container-help","text":"","title":"Docker container --help"},{"location":"docker-/#images","text":"C'est un ensemble d'instructions pour cr\u00e9er un conteneur pouvant s'ex\u00e9cuter. Elle repr\u00e9sente le syst\u00e8me de fichiers, sans les processus... C'est un ensemble de couche(layers). Les images sont \u00e9galement le point de d\u00e9part pour quiconque utilise Docker pour la premi\u00e8re fois.","title":"Images"},{"location":"docker-/#exemple_1","text":"docker pull debian","title":"Exemple"},{"location":"docker-/#docker-image-help","text":"Plus d'info sur le site de Docker","title":"Docker image --help"},{"location":"docker-/#une-petite-image","text":"Alpine Linux est une distribution Linux. Qui est leg\u00e8re et est parfaite pour les petits syst\u00e8me d'exploitation l'image ne fait que 5 Mo. docker pull alpine:3.15.0","title":"Une petite image?"},{"location":"docker-/#volumes","text":"OHHHH \ud83e\udd2f on a entendu dire que c'est casse t\u00eate? Mais non c'est un sujet simple je vous explique: C'est la mani\u00e8re la plus s\u00fbre de cr\u00e9er et d'utiliser les donn\u00e9es d'un conteneur.","title":"Volumes"},{"location":"docker-/#fonctionnement","text":"C'est un endroit qu'on cr\u00e9e pour pr\u00e9server les donn\u00e9es g\u00e9n\u00e9r\u00e9es par le conteneur en cours d'ex\u00e9cution. Ils sont stock\u00e9s sur l'h\u00f4te, ind\u00e9pendamment du cycle de vie du conteneur. Cela permet aux utilisateurs de sauvegarder facilement des donn\u00e9es et de partager des syst\u00e8mes de fichiers entre les conteneurs.","title":"Fonctionnement"},{"location":"docker-/#avantages","text":"Ils sont plus faciles \u00e0 sauvegarder ou \u00e0 migrer. z- La gestion est facile \u00e0 l'aide des commandes Docker CLI ou de l'API Docker. Ils fonctionnent sur les conteneurs Linux et Windows. Ils peuvent \u00eatre partag\u00e9s de mani\u00e8re plus s\u00fbre entre plusieurs conteneurs. Les pilotes de volume vous permettent de stocker des volumes sur des h\u00f4tes distants ou des fournisseurs de cloud, de chiffrer le contenu des volumes ou d'ajouter d'autres fonctionnalit\u00e9s. Les nouveaux volumes peuvent avoir leur contenu pr\u00e9-rempli par un conteneur.","title":"Avantages"},{"location":"docker-/#creeation-dun-volume","text":"docker volume create [OPTIONS] [VOLUME] On peut aussi cr\u00e9er un volume avec la commande docker run --mount source=myvol2,target=/app ou docker run -v myvol2:/app Pour savoir tout ce qu'on peut faire avec les volumes taper la commande docker volume --help","title":"Cr\u00e9eation d'un volume"},{"location":"docker-/#dockerfile","text":"Ce fichier permet de cr\u00e9er une image custom, au lieu de le faire en ligne de commande, on peut le faire dans un fichier dont la maintenance est facile. FROM python:3.7-alpine WORKDIR /code ENV FLASK_APP=app.py ENV FLASK_RUN_HOST=0.0.0.0 RUN apk add --no-cache gcc musl-dev linux-headers COPY requirements.txt requirements.txt RUN pip install -r requirements.txt EXPOSE 5000 COPY . . CMD [\"flask\", \"run\"]","title":"Dockerfile"},{"location":"docker-/#docker-compose","text":"","title":"Docker-compose"},{"location":"docker-/#installation","text":"Vous trouverez ici tout ce qu'il vous faut sur Docker-compose sudo curl -L \"https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose Appliquez les autorisations ex\u00e9cutables au binaire ici la doc sudo chmod +x /usr/local/bin/docker-compose","title":"Installation"},{"location":"docker-/#utilisation","text":"Rappelons que ce fichier contient le docker run commande Exemple de docker-compose version: \"3.9\" services: web: build: . ports: - \"5000:5000\" redis: image: \"redis:alpine\"","title":"Utilisation"},{"location":"docker-/#commandes-utiles","text":"Container Management CLIs docker run image : cr\u00e9e le container et le lance i.e. **docker run postgres:alpine3.16** docker start container: lance le container docker stop container: arr\u00eate le container docker kill container: tue le container docker restart container: arr\u00eate le container et le lance docker pause container: suspend le container docker rm container: detruit le container Inspection du conteneur docker ps : lister l'ensemble des container en cours d'execution docker ps -a: lister tous les containers docker logs [-f] container: lister les logs Interagir avec le conteneur et images docker attach container : Rejoint le container en cours, mais s'il est arr\u00eat\u00e9, il tue le container en cours docker exec container args..: lancer un container docker images: lister toutes les images docker pull repo[:tag]: puller une image du registry docker push repo[:tag]: pusher une image du registry docker images: lister toutes les images","title":"Commandes utiles"},{"location":"docker-/#conclusion","text":"Ce tutoriel arrive \u00e0 sa fin, pour plus d'informations, je vous recommande la documentation de Docker dont le lien est en bas dans les ressources. Ou sur les tutoriels techniques de SoowCode. Sources : Docker cheat sheet Docker","title":"Conclusion"},{"location":"docker-mysql/","text":"Docker-MySQL Introduction MySQL est un syst\u00e8me de gestion de base de donn\u00e9es relationnelle est open source et gratuit est id\u00e9al pour les petites et les grandes applications est tr\u00e8s rapide, fiable, \u00e9volutif et facile \u00e0 utiliser est multiplateforme et conforme \u00e0 la norme ANSI SQL a \u00e9t\u00e9 publi\u00e9 pour la premi\u00e8re fois en 1995 est d\u00e9velopp\u00e9, distribu\u00e9 et pris en charge par Oracle Corporation porte le nom de la fille du co-fondateur Monty Widenius : My Fonctionnement Docker-compose Pour faire tourner une database MySQL dans un conteneur la cr\u00e9ation d'un docker-compose.yml est n\u00e9cessaire ou l'utilisation d'un docker run. Hummm, comment le faire??? Ahhh, mais c'est simple, cr\u00e9er un fichier \"docker compose.yml \" dans votre folder et mettez ceci dedans. version: \"3.9\" services: mysql: image: mysql:5.7.36 hostname: db-mysql container_name: db-mysql #replace environment section environment: #celui-ci est le seul obligatoire - MYSQL_ROOT_PASSWORD: root_assword - MYSQL_USER: mon_user - MYSQL_PASSWORD: user_password - MYSQL_DATABASE: database_name #expose le port de MySQL sinon il ne sera pas vu par la machine on appelle ceci le biding ports: - 3306:3306 Ainsi, en ligne de commande acc\u00e9der \u00e0 MySQL en tapant: docker exec -it db-mysql bash Ne vous d\u00e9couragerez pas je vous explique Le \"docker exec\" ex\u00e9cute une commande dans un conteneur en cours d'ex\u00e9cution. Le \"-it\" signifie fais le en mode interactive Le \"db-mysql\" est nom du conteneur Le \"bash\" \u00e0 la fin signifie qu'on veut ex\u00e9cuter \"db-mysql\" en mode bash Sachez que le \"docker-compose\" manipule les services, mais que docker lui seul manipule les containers. Mais, perso, j'ai choisi d'installer sur vscode l'extension database qui me permet de me connecter et de manipuler MySQL avec une jolie interface plus d'info sur l'extension database. Database extension apr\u00e8s connexion \u00e0 la base mysql No kidding \ud83d\ude02 !! je ne me suis pas arret\u00e9e l\u00e0. J'ai donc rajout\u00e9 une interface web en utilisant adminer. Documentation juste \ud83d\udc49 ici . Sinon voici un exemple de docker-compose avec adminer comme service. adminer: depends_on: - mysql image: adminer restart: always ports: - 8080:8080 NB: on rajoute \"depends*on:\" car on veut qu'il attende que MySQL finisse de d\u00e9marrer avant de se lancer. Vous trouverez plus d'info sur docker hub . Docker run Alors j'aime bien le docker-compose, car \u00e7a nous \u00e9vite de rappeler nos commandes ou bien de recopier tout le temps la commande. C'est aussi un moyen rapide de faire des modifications. Mais ce n'est pas la seule m\u00e9thode \u00e0 utiliser pour initialiser un container MySQL, il y a la simple commande docker run docker run --name=container_name --restart on-failure -d image_name:tag En rempla\u00e7ant les lettres par leurs valeurs, on obtient un truc pareil : docker run -itd --name db-mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=root_assword -e MYSQL_USER=mon_user -e MYSQL_PASSWORD=user_password -e MYSQL_DATABASE=database_name mysql:5.7.36 Variables d'environnement On ne va surtout pas tous les voir ici, mais je vous invite \u00e0 r\u00e9garder ici o\u00f9 vous en trouverez beaucoup. Alors ceux qu'on a utilis\u00e9s sont assez clairs, mais pour juste un peu parler, je dirais que chaque serve ou base de donn\u00e9es bref chaque image docker peut contenir des variables d'environnements. On peut donc trouver dans le docker hub de l'image ou bien sur le site officiel de la techno quel environnement on en a besoin. On le sp\u00e9cifie dans docker run avec \" -e, --env, --env-file \" et dans un docker-compose par \"environment\" Exemple de dokcer run: docker run -e MYVAR1 --env MYVAR2=foo --env-file ./env.list ubuntu bash Exemple de dokcer-compose: environment: - MYSQL_ROOT_PASSWORD: root_assword - MYSQL_USER: mon_user - MYSQL_PASSWORD: user_password - MYSQL_DATABASE: database_name Conclusion Nous arrivons \u00e0 la fin de notre tuto happy!!\ud83d\ude01, je vous invite donc de voir ce article sur docker-compose. Car, ceci n'est qu'une introduction au MySQL en utilisant les containers, pour plus d'informations visitez le site docker-hub ou sur le site de MySQL www.mysql.com .","title":"Docker-MySQL"},{"location":"docker-mysql/#docker-mysql","text":"","title":"Docker-MySQL"},{"location":"docker-mysql/#introduction","text":"MySQL est un syst\u00e8me de gestion de base de donn\u00e9es relationnelle est open source et gratuit est id\u00e9al pour les petites et les grandes applications est tr\u00e8s rapide, fiable, \u00e9volutif et facile \u00e0 utiliser est multiplateforme et conforme \u00e0 la norme ANSI SQL a \u00e9t\u00e9 publi\u00e9 pour la premi\u00e8re fois en 1995 est d\u00e9velopp\u00e9, distribu\u00e9 et pris en charge par Oracle Corporation porte le nom de la fille du co-fondateur Monty Widenius : My","title":"Introduction"},{"location":"docker-mysql/#fonctionnement","text":"","title":"Fonctionnement"},{"location":"docker-mysql/#docker-compose","text":"Pour faire tourner une database MySQL dans un conteneur la cr\u00e9ation d'un docker-compose.yml est n\u00e9cessaire ou l'utilisation d'un docker run. Hummm, comment le faire??? Ahhh, mais c'est simple, cr\u00e9er un fichier \"docker compose.yml \" dans votre folder et mettez ceci dedans. version: \"3.9\" services: mysql: image: mysql:5.7.36 hostname: db-mysql container_name: db-mysql #replace environment section environment: #celui-ci est le seul obligatoire - MYSQL_ROOT_PASSWORD: root_assword - MYSQL_USER: mon_user - MYSQL_PASSWORD: user_password - MYSQL_DATABASE: database_name #expose le port de MySQL sinon il ne sera pas vu par la machine on appelle ceci le biding ports: - 3306:3306 Ainsi, en ligne de commande acc\u00e9der \u00e0 MySQL en tapant: docker exec -it db-mysql bash Ne vous d\u00e9couragerez pas je vous explique Le \"docker exec\" ex\u00e9cute une commande dans un conteneur en cours d'ex\u00e9cution. Le \"-it\" signifie fais le en mode interactive Le \"db-mysql\" est nom du conteneur Le \"bash\" \u00e0 la fin signifie qu'on veut ex\u00e9cuter \"db-mysql\" en mode bash Sachez que le \"docker-compose\" manipule les services, mais que docker lui seul manipule les containers. Mais, perso, j'ai choisi d'installer sur vscode l'extension database qui me permet de me connecter et de manipuler MySQL avec une jolie interface plus d'info sur l'extension database. Database extension apr\u00e8s connexion \u00e0 la base mysql No kidding \ud83d\ude02 !! je ne me suis pas arret\u00e9e l\u00e0. J'ai donc rajout\u00e9 une interface web en utilisant adminer. Documentation juste \ud83d\udc49 ici . Sinon voici un exemple de docker-compose avec adminer comme service. adminer: depends_on: - mysql image: adminer restart: always ports: - 8080:8080 NB: on rajoute \"depends*on:\" car on veut qu'il attende que MySQL finisse de d\u00e9marrer avant de se lancer. Vous trouverez plus d'info sur docker hub .","title":"Docker-compose"},{"location":"docker-mysql/#docker-run","text":"Alors j'aime bien le docker-compose, car \u00e7a nous \u00e9vite de rappeler nos commandes ou bien de recopier tout le temps la commande. C'est aussi un moyen rapide de faire des modifications. Mais ce n'est pas la seule m\u00e9thode \u00e0 utiliser pour initialiser un container MySQL, il y a la simple commande docker run docker run --name=container_name --restart on-failure -d image_name:tag En rempla\u00e7ant les lettres par leurs valeurs, on obtient un truc pareil : docker run -itd --name db-mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=root_assword -e MYSQL_USER=mon_user -e MYSQL_PASSWORD=user_password -e MYSQL_DATABASE=database_name mysql:5.7.36","title":"Docker run"},{"location":"docker-mysql/#variables-denvironnement","text":"On ne va surtout pas tous les voir ici, mais je vous invite \u00e0 r\u00e9garder ici o\u00f9 vous en trouverez beaucoup. Alors ceux qu'on a utilis\u00e9s sont assez clairs, mais pour juste un peu parler, je dirais que chaque serve ou base de donn\u00e9es bref chaque image docker peut contenir des variables d'environnements. On peut donc trouver dans le docker hub de l'image ou bien sur le site officiel de la techno quel environnement on en a besoin. On le sp\u00e9cifie dans docker run avec \" -e, --env, --env-file \" et dans un docker-compose par \"environment\"","title":"Variables d'environnement"},{"location":"docker-mysql/#conclusion","text":"Nous arrivons \u00e0 la fin de notre tuto happy!!\ud83d\ude01, je vous invite donc de voir ce article sur docker-compose. Car, ceci n'est qu'une introduction au MySQL en utilisant les containers, pour plus d'informations visitez le site docker-hub ou sur le site de MySQL www.mysql.com .","title":"Conclusion"},{"location":"docker-registry/","text":"Docker Registry Introduction Ce tutoriel vous guidera \u00e0 travers le processus de mise en place d'un service Docker Registry et d'une interface utilisateur pour g\u00e9rer vos images Docker. Nous utiliserons Docker Compose pour simplifier le d\u00e9ploiement. Le Docker Registry est un service de stockage d'images Docker, tandis que l'interface utilisateur offre une mani\u00e8re conviviale de visualiser et g\u00e9rer ces images. Pr\u00e9requis Docker doit \u00eatre install\u00e9 sur votre syst\u00e8me. Des connaissances de base sur Docker et Docker Compose sont n\u00e9cessaires. Fonctionnement 1. Cr\u00e9ez un Fichier Docker Compose Cr\u00e9ez un fichier nomm\u00e9 docker-compose.yml et copiez le contenu suivant : version: '3' services: registry: image: registry:2 ports: - 5000:5000 restart: always volumes: - ./registry-data:/var/lib/registry registry-ui: image: konradkleine/docker-registry-frontend:v2 ports: - 8080:80 environment: - ENV_DOCKER_REGISTRY_HOST=registry - ENV_DOCKER_REGISTRY_PORT=5000 Ce fichier Compose d\u00e9finit deux services : registry pour le Docker Registry et registry-ui pour l'interface utilisateur. 2. Cr\u00e9ez un R\u00e9pertoire pour les Donn\u00e9es du Registry Cr\u00e9ez un r\u00e9pertoire nomm\u00e9 registry-data dans le m\u00eame emplacement que votre fichier docker-compose.yml . Ce r\u00e9pertoire stockera les donn\u00e9es de votre Docker Registry. mkdir registry-data 3. D\u00e9marrez les Services Ex\u00e9cutez la commande suivante dans le r\u00e9pertoire o\u00f9 se trouve votre fichier docker-compose.yml : docker-compose up -d Cette commande d\u00e9marre le Docker Registry et l'interface utilisateur en mode d\u00e9tach\u00e9, leur permettant de s'ex\u00e9cuter en arri\u00e8re-plan. 4. Acc\u00e9dez \u00e0 l'Interface Utilisateur du Docker Registry Ouvrez votre navigateur web et acc\u00e9dez \u00e0 http://localhost:8080 . Vous devriez voir l'interface utilisateur du Docker Registry, o\u00f9 vous pouvez g\u00e9rer vos images Docker visuellement. 5. Ajoutez et R\u00e9cup\u00e9rez des Images Pour utiliser votre Docker Registry, vous pouvez ajouter des images et les r\u00e9cup\u00e9rer. Voici quelques commandes de base : Ajoutez une image : docker tag alpine:3.18.4 localhost:5000/mon_alpine:v3.18.4 docker push localhost:5000/mon_alpine:v3.18.4 R\u00e9cup\u00e9rez une image : docker pull localhost:5000/mon_alpine:v3.18.4 Remplacez alpine:v3.18.4 par le nom et le tag de votre image Docker locale, et mon_alpine:v3.18.4 par le nom et le tag souhait\u00e9s pour votre registry. Conclusion F\u00e9licitations ! Vous avez r\u00e9ussi \u00e0 mettre en place un service Docker Registry et une interface utilisateur pour g\u00e9rer vos images Docker. Vous pouvez d\u00e9sormais stocker et g\u00e9rer vos images Docker en toute s\u00e9curit\u00e9 en utilisant ce registre priv\u00e9. N'h\u00e9sitez pas \u00e0 personnaliser davantage les configurations, comme l'ajout de SSL pour la s\u00e9curit\u00e9 ou la configuration de l'authentification pour votre registre, en fonction de votre cas d'utilisation sp\u00e9cifique.","title":"Docker Registry"},{"location":"docker-registry/#docker-registry","text":"","title":"Docker Registry"},{"location":"docker-registry/#introduction","text":"Ce tutoriel vous guidera \u00e0 travers le processus de mise en place d'un service Docker Registry et d'une interface utilisateur pour g\u00e9rer vos images Docker. Nous utiliserons Docker Compose pour simplifier le d\u00e9ploiement. Le Docker Registry est un service de stockage d'images Docker, tandis que l'interface utilisateur offre une mani\u00e8re conviviale de visualiser et g\u00e9rer ces images.","title":"Introduction"},{"location":"docker-registry/#prerequis","text":"Docker doit \u00eatre install\u00e9 sur votre syst\u00e8me. Des connaissances de base sur Docker et Docker Compose sont n\u00e9cessaires.","title":"Pr\u00e9requis"},{"location":"docker-registry/#fonctionnement","text":"","title":"Fonctionnement"},{"location":"docker-registry/#1-creez-un-fichier-docker-compose","text":"Cr\u00e9ez un fichier nomm\u00e9 docker-compose.yml et copiez le contenu suivant : version: '3' services: registry: image: registry:2 ports: - 5000:5000 restart: always volumes: - ./registry-data:/var/lib/registry registry-ui: image: konradkleine/docker-registry-frontend:v2 ports: - 8080:80 environment: - ENV_DOCKER_REGISTRY_HOST=registry - ENV_DOCKER_REGISTRY_PORT=5000 Ce fichier Compose d\u00e9finit deux services : registry pour le Docker Registry et registry-ui pour l'interface utilisateur.","title":"1. Cr\u00e9ez un Fichier Docker Compose"},{"location":"docker-registry/#2-creez-un-repertoire-pour-les-donnees-du-registry","text":"Cr\u00e9ez un r\u00e9pertoire nomm\u00e9 registry-data dans le m\u00eame emplacement que votre fichier docker-compose.yml . Ce r\u00e9pertoire stockera les donn\u00e9es de votre Docker Registry. mkdir registry-data","title":"2. Cr\u00e9ez un R\u00e9pertoire pour les Donn\u00e9es du Registry"},{"location":"docker-registry/#3-demarrez-les-services","text":"Ex\u00e9cutez la commande suivante dans le r\u00e9pertoire o\u00f9 se trouve votre fichier docker-compose.yml : docker-compose up -d Cette commande d\u00e9marre le Docker Registry et l'interface utilisateur en mode d\u00e9tach\u00e9, leur permettant de s'ex\u00e9cuter en arri\u00e8re-plan.","title":"3. D\u00e9marrez les Services"},{"location":"docker-registry/#4-accedez-a-linterface-utilisateur-du-docker-registry","text":"Ouvrez votre navigateur web et acc\u00e9dez \u00e0 http://localhost:8080 . Vous devriez voir l'interface utilisateur du Docker Registry, o\u00f9 vous pouvez g\u00e9rer vos images Docker visuellement.","title":"4. Acc\u00e9dez \u00e0 l'Interface Utilisateur du Docker Registry"},{"location":"docker-registry/#5-ajoutez-et-recuperez-des-images","text":"Pour utiliser votre Docker Registry, vous pouvez ajouter des images et les r\u00e9cup\u00e9rer. Voici quelques commandes de base : Ajoutez une image : docker tag alpine:3.18.4 localhost:5000/mon_alpine:v3.18.4 docker push localhost:5000/mon_alpine:v3.18.4 R\u00e9cup\u00e9rez une image : docker pull localhost:5000/mon_alpine:v3.18.4 Remplacez alpine:v3.18.4 par le nom et le tag de votre image Docker locale, et mon_alpine:v3.18.4 par le nom et le tag souhait\u00e9s pour votre registry.","title":"5. Ajoutez et R\u00e9cup\u00e9rez des Images"},{"location":"docker-registry/#conclusion","text":"F\u00e9licitations ! Vous avez r\u00e9ussi \u00e0 mettre en place un service Docker Registry et une interface utilisateur pour g\u00e9rer vos images Docker. Vous pouvez d\u00e9sormais stocker et g\u00e9rer vos images Docker en toute s\u00e9curit\u00e9 en utilisant ce registre priv\u00e9. N'h\u00e9sitez pas \u00e0 personnaliser davantage les configurations, comme l'ajout de SSL pour la s\u00e9curit\u00e9 ou la configuration de l'authentification pour votre registre, en fonction de votre cas d'utilisation sp\u00e9cifique.","title":"Conclusion"},{"location":"git-commands-utils/","text":"Git Delete \ud83d\ude07 Git Delete a remote branch \ud83d\udc49 Supprimer une branche distante Commencez par v\u00e9rifier dans quelles branches vous \u00eates actuellement et voir \u00e9galement la liste des branches distances m\u00eame celles que vous n'avez pas cr\u00e9\u00e9e en ex\u00e9cutant la commande suivante git branch -a Pour voir les branches que vous avez seulement cr\u00e9\u00e9es ex\u00e9cutez la commande suivante git branch Pour supprimer une branche distante, vous devez lui assigner l\u2019\u00e9tiquette \u00ab: remote_branch_name\u00bb n'oubliez pas les 2 points \":\". Par exemple, pour supprimer la branche \u00abmy-branch\u00bb de votre d\u00e9p\u00f4t(repository) distant, vous devez ex\u00e9cuter la commande suivante git push origin :my-branch Vous pouvez \u00e9galement utiliser l'option -d qui signifie delete comme suit git push origin -d my-branch Pour vous assurer que la branche a bien \u00e9t\u00e9 supprim\u00e9e, vous pouvez ex\u00e9cuter la commande suivante ou aller sur github/gitlab/bitbucket... git branch -a Vous devriez voir que la branche \u00abmy-branch\u00bb a \u00e9t\u00e9 supprim\u00e9e. Git delete a local branch \ud83d\udc49 Supprimer une branche en local Comme en haut, on lance la commande git branch afin de voir la liste des branches en local. NB: c'est inutile de lancer git branch -a car on ne veut pas voir les branches distantes mais juste locales. git branch Pour supprimer une branche en local, vous devez ex\u00e9cuter la commande suivante git branch -d <branch_name> Notez que vous pouvez \u00e9galement utiliser l'option -D qui signifie delete et force comme suit git branch -D <branch_name> Pour vous assurer que la branche a bien \u00e9t\u00e9 supprim\u00e9e, vous pouvez ex\u00e9cuter la commande suivante git branch Vous devriez voir que la branche \u00abmy-branch\u00bb a \u00e9t\u00e9 supprim\u00e9e.","title":"Git Delete \ud83d\ude07"},{"location":"git-commands-utils/#git-delete","text":"","title":"Git Delete \ud83d\ude07"},{"location":"git-commands-utils/#git-delete-a-remote-branch-supprimer-une-branche-distante","text":"Commencez par v\u00e9rifier dans quelles branches vous \u00eates actuellement et voir \u00e9galement la liste des branches distances m\u00eame celles que vous n'avez pas cr\u00e9\u00e9e en ex\u00e9cutant la commande suivante git branch -a Pour voir les branches que vous avez seulement cr\u00e9\u00e9es ex\u00e9cutez la commande suivante git branch Pour supprimer une branche distante, vous devez lui assigner l\u2019\u00e9tiquette \u00ab: remote_branch_name\u00bb n'oubliez pas les 2 points \":\". Par exemple, pour supprimer la branche \u00abmy-branch\u00bb de votre d\u00e9p\u00f4t(repository) distant, vous devez ex\u00e9cuter la commande suivante git push origin :my-branch Vous pouvez \u00e9galement utiliser l'option -d qui signifie delete comme suit git push origin -d my-branch Pour vous assurer que la branche a bien \u00e9t\u00e9 supprim\u00e9e, vous pouvez ex\u00e9cuter la commande suivante ou aller sur github/gitlab/bitbucket... git branch -a Vous devriez voir que la branche \u00abmy-branch\u00bb a \u00e9t\u00e9 supprim\u00e9e.","title":"Git Delete a remote branch \ud83d\udc49 Supprimer une branche distante"},{"location":"git-commands-utils/#git-delete-a-local-branch-supprimer-une-branche-en-local","text":"Comme en haut, on lance la commande git branch afin de voir la liste des branches en local. NB: c'est inutile de lancer git branch -a car on ne veut pas voir les branches distantes mais juste locales. git branch Pour supprimer une branche en local, vous devez ex\u00e9cuter la commande suivante git branch -d <branch_name> Notez que vous pouvez \u00e9galement utiliser l'option -D qui signifie delete et force comme suit git branch -D <branch_name> Pour vous assurer que la branche a bien \u00e9t\u00e9 supprim\u00e9e, vous pouvez ex\u00e9cuter la commande suivante git branch Vous devriez voir que la branche \u00abmy-branch\u00bb a \u00e9t\u00e9 supprim\u00e9e.","title":"Git delete a local branch \ud83d\udc49 Supprimer une branche en local"},{"location":"github-actions/","text":"Github-actions Introduction Il est indispensable de d\u00e9velopper des logiciels sans les pipelines CI/CD. Les plates-formes CI/CD sont des syst\u00e8mes de contr\u00f4les ph\u00e9nom\u00e9naux. Il ne demande pas beaucoup de configurations et est super-amazing ! En entreprise, j'utilise Gitlab-ci et j'apprends Jenkins, mais j'utilise pour mes projets personnels github, alors je me suis dit si je peux avoir des pipelines sur Gitlab why not sur github . Ainsi, je me suis mis \u00e0 la recherche d'une chose qui remplace les pipelines de gitlab en quelque chose sur github et boum je suis tomb\u00e9e sur Github-actions. Dans ce tutoriel, je ne me mettrais surtout pas \u00e0 comparer les CI/CD tools, mais expliqu\u00e9 mon aventure avec github-actions. Fonctionnement Il faut savoir que toutes les actions de GitHub commencent par un \u00e9v\u00e9nements. Les \u00e9v\u00e9nements sont les d\u00e9clencheurs (triggers) qui indiquent \u00e0 GitHub d'ex\u00e9cuter des actions configur\u00e9es. Pour voir la liste des \u00e9venements d\u00e9clencheurs je vous invite sur Ici une github-events. Push \u00e9clenche quand un utilisateur pousse dans une branche Pull_request Se d\u00e9clenche lorsqu'une pull_request est re\u00e7ue sur le r\u00e9pository. Fork D\u00e9clenche quand le d\u00e9p\u00f4t est forked. Issues Se d\u00e9clenche quand une issue est modifi\u00e9e. Release Se d\u00e9clenche quand une version du d\u00e9p\u00f4t est cr\u00e9\u00e9e. Exemple de gitflow name: CI/CD # Controls when the workflow will run on: # Triggers the workflow on push or pull request events but only for the main branch push: branches: [master] # Allows you to run this workflow manually from the Actions tab workflow_dispatch: jobs: # This workflow contains a single job called \"deploy\" deploy: runs-on: ubuntu-latest steps: - run: printenv - uses: actions/checkout@v2 - run: echo \"\ud83c\udf89 The job was successful.\" Explications L'attribut name name: CI/CD La section name constitue le nom de votre workflow et sera le nom affich\u00e9 ici \u00e0 gauche. L'attribut on # Controls when the workflow will run on: # Triggers the workflow on push or pull request events but only for the main branch push: branches: [master] Le on d\u00e9clenche le workflow sur les \u00e9v\u00e9nements push ou pull request mais uniquement pour la branche master . L'attribut workflow_dispatch # Allows you to run this workflow manually from the Actions tab workflow_dispatch: le workflow_dispatch permet d'ex\u00e9cuter ce workflow manuellement \u00e0 partir de l'onglet \"Actions\". L'attribut jobs jobs: # This workflow contains a single job called \"deploy\" deploy: runs-on: ubuntu-latest steps: - run: printenv - uses: actions/checkout@v2 - run: echo \"\ud83c\udf89 The job was successful.\" Ce workflow contient un seul job appel\u00e9 deploy qui - run: pritenv affiche les variables d'env - uses: actions/checkout@v2 cette action v\u00e9rifie le repository sous $GITHUB_WORKSPACE, afin que le workflow puisse y acc\u00e9der. - run: echo \"\ud83c\udf89 The job was successful.\" affiche ce message \u00e0 la fin. Conclusion Ce tutoriel \u00e9tait une br\u00e8ve introduction \u00e0 github-actions. Pour plus d'informations visitez le site github actions.","title":"Github-actions"},{"location":"github-actions/#github-actions","text":"","title":"Github-actions"},{"location":"github-actions/#introduction","text":"Il est indispensable de d\u00e9velopper des logiciels sans les pipelines CI/CD. Les plates-formes CI/CD sont des syst\u00e8mes de contr\u00f4les ph\u00e9nom\u00e9naux. Il ne demande pas beaucoup de configurations et est super-amazing ! En entreprise, j'utilise Gitlab-ci et j'apprends Jenkins, mais j'utilise pour mes projets personnels github, alors je me suis dit si je peux avoir des pipelines sur Gitlab why not sur github . Ainsi, je me suis mis \u00e0 la recherche d'une chose qui remplace les pipelines de gitlab en quelque chose sur github et boum je suis tomb\u00e9e sur Github-actions. Dans ce tutoriel, je ne me mettrais surtout pas \u00e0 comparer les CI/CD tools, mais expliqu\u00e9 mon aventure avec github-actions.","title":"Introduction"},{"location":"github-actions/#fonctionnement","text":"Il faut savoir que toutes les actions de GitHub commencent par un \u00e9v\u00e9nements. Les \u00e9v\u00e9nements sont les d\u00e9clencheurs (triggers) qui indiquent \u00e0 GitHub d'ex\u00e9cuter des actions configur\u00e9es. Pour voir la liste des \u00e9venements d\u00e9clencheurs je vous invite sur Ici une github-events. Push \u00e9clenche quand un utilisateur pousse dans une branche Pull_request Se d\u00e9clenche lorsqu'une pull_request est re\u00e7ue sur le r\u00e9pository. Fork D\u00e9clenche quand le d\u00e9p\u00f4t est forked. Issues Se d\u00e9clenche quand une issue est modifi\u00e9e. Release Se d\u00e9clenche quand une version du d\u00e9p\u00f4t est cr\u00e9\u00e9e.","title":"Fonctionnement"},{"location":"github-actions/#exemple-de-gitflow","text":"name: CI/CD # Controls when the workflow will run on: # Triggers the workflow on push or pull request events but only for the main branch push: branches: [master] # Allows you to run this workflow manually from the Actions tab workflow_dispatch: jobs: # This workflow contains a single job called \"deploy\" deploy: runs-on: ubuntu-latest steps: - run: printenv - uses: actions/checkout@v2 - run: echo \"\ud83c\udf89 The job was successful.\"","title":"Exemple de gitflow"},{"location":"github-actions/#explications","text":"L'attribut name name: CI/CD La section name constitue le nom de votre workflow et sera le nom affich\u00e9 ici \u00e0 gauche. L'attribut on # Controls when the workflow will run on: # Triggers the workflow on push or pull request events but only for the main branch push: branches: [master] Le on d\u00e9clenche le workflow sur les \u00e9v\u00e9nements push ou pull request mais uniquement pour la branche master . L'attribut workflow_dispatch # Allows you to run this workflow manually from the Actions tab workflow_dispatch: le workflow_dispatch permet d'ex\u00e9cuter ce workflow manuellement \u00e0 partir de l'onglet \"Actions\". L'attribut jobs jobs: # This workflow contains a single job called \"deploy\" deploy: runs-on: ubuntu-latest steps: - run: printenv - uses: actions/checkout@v2 - run: echo \"\ud83c\udf89 The job was successful.\" Ce workflow contient un seul job appel\u00e9 deploy qui - run: pritenv affiche les variables d'env - uses: actions/checkout@v2 cette action v\u00e9rifie le repository sous $GITHUB_WORKSPACE, afin que le workflow puisse y acc\u00e9der. - run: echo \"\ud83c\udf89 The job was successful.\" affiche ce message \u00e0 la fin.","title":"Explications"},{"location":"github-actions/#conclusion","text":"Ce tutoriel \u00e9tait une br\u00e8ve introduction \u00e0 github-actions. Pour plus d'informations visitez le site github actions.","title":"Conclusion"},{"location":"gitlab_ci/","text":"Gitlab-ci Introduction GitLab est une plateforme de d\u00e9veloppement collaborative open source, id\u00e9al pour le d\u00e9veloppement de logiciels, la s\u00e9curit\u00e9 et les op\u00e9rations qui permet le DevOps simultan\u00e9 . GitLab acc\u00e9l\u00e8re le cycle de vie du logiciel et am\u00e9liore radicalement la vitesse des affaires. Gitlab-ci.yml est un fichier qui permet de configure votre CI/CD. Gr\u00e2ce \u00e0 ce fichier vous avez la possibilit\u00e9 de cr\u00e9er des cron-jobs, des triggers, des deployement, des publications et tant d'autres folies. Ici une documentation compl\u00e8te. Focntionnement Exemple stages: - build - test - deploy build-job: stage: build script: - echo \"Hello, $GITLAB_USER_LOGIN!\" test-job1: stage: test script: - echo \"This job tests something\" test-job2: stage: test script: - echo \"This job tests something, but takes more time than test-job1.\" - echo \"After the echo commands complete, it runs the sleep command for 20 seconds\" - echo \"which simulates a test that runs 20 seconds longer than test-job1\" - sleep 20 deploy-prod: stage: deploy script: - echo \"This job deploys something from the $CI_COMMIT_BRANCH branch.\" Explication Stages stages: - build - test - deploy Les stages sont les \u00e9tapes que le pipeline effectuera ici cr\u00e9ez, testez et d\u00e9ployez . Cela signifie que maintenant les t\u00e2ches pourront \u00eatre affect\u00e9e \u00e0 l'une des \u00e9tapes ci-dessus. L'ordre des \u00e9l\u00e9ments dans les stages d\u00e9finit l'ordre d'ex\u00e9cution des t\u00e2ches. T\u00e2ches stage build(construire) et la t\u00e2che build-job build-job: stage: build script: - echo \"Hello, $GITLAB_USER_LOGIN!\" Cette t\u00e2che utilise le stage build et un autre \u00e9lement entre en compte ici, c'est le mot cl\u00e9 script qui permet de sp\u00e9cifier ce que la t\u00e2che doit faire. Comme par exemple afficher Hello l'utisateur gitlab dans notre cas. Les t\u00e2ches test-job1 && test-job2 et le stage test test-job1: stage: test script: - echo \"This job tests something\" test-job2: stage: test script: - echo \"This job tests something, but takes more time than test-job1.\" - echo \"After the echo commands complete, it runs the sleep command for 20 seconds\" - echo \"which simulates a test that runs 20 seconds longer than test-job1\" - sleep 20 Comme vous pouvez le constater dans les scripts il est clairement mentionn\u00e9 ce que fait les scripts. La t\u00e2che deploy-prod && le stage deploy deploy-prod: stage: deploy script: - echo \"This job deploys something from the $CI_COMMIT_BRANCH branch.\" Comme vous pouvez le constater dans les scripts il est clairement mentionn\u00e9 ce que fait le script. Il deploie quelque chose sur la branche du commit. NB: ceci n'est qu'une introduction \u00e0 gitlab-ci.yml Conclusion Ce tutorial arrive \u00e0 sa fin. Pour avoir plus d'informations sur Gitlab-ci.yml, je vous invite \u00e0 visit\u00e9 le site de GITLAB. , qui by the way is amazing!","title":"Gitlab-ci"},{"location":"gitlab_ci/#gitlab-ci","text":"","title":"Gitlab-ci"},{"location":"gitlab_ci/#introduction","text":"GitLab est une plateforme de d\u00e9veloppement collaborative open source, id\u00e9al pour le d\u00e9veloppement de logiciels, la s\u00e9curit\u00e9 et les op\u00e9rations qui permet le DevOps simultan\u00e9 . GitLab acc\u00e9l\u00e8re le cycle de vie du logiciel et am\u00e9liore radicalement la vitesse des affaires. Gitlab-ci.yml est un fichier qui permet de configure votre CI/CD. Gr\u00e2ce \u00e0 ce fichier vous avez la possibilit\u00e9 de cr\u00e9er des cron-jobs, des triggers, des deployement, des publications et tant d'autres folies. Ici une documentation compl\u00e8te.","title":"Introduction"},{"location":"gitlab_ci/#focntionnement","text":"","title":"Focntionnement"},{"location":"gitlab_ci/#exemple","text":"stages: - build - test - deploy build-job: stage: build script: - echo \"Hello, $GITLAB_USER_LOGIN!\" test-job1: stage: test script: - echo \"This job tests something\" test-job2: stage: test script: - echo \"This job tests something, but takes more time than test-job1.\" - echo \"After the echo commands complete, it runs the sleep command for 20 seconds\" - echo \"which simulates a test that runs 20 seconds longer than test-job1\" - sleep 20 deploy-prod: stage: deploy script: - echo \"This job deploys something from the $CI_COMMIT_BRANCH branch.\"","title":"Exemple"},{"location":"gitlab_ci/#explication","text":"Stages stages: - build - test - deploy Les stages sont les \u00e9tapes que le pipeline effectuera ici cr\u00e9ez, testez et d\u00e9ployez . Cela signifie que maintenant les t\u00e2ches pourront \u00eatre affect\u00e9e \u00e0 l'une des \u00e9tapes ci-dessus. L'ordre des \u00e9l\u00e9ments dans les stages d\u00e9finit l'ordre d'ex\u00e9cution des t\u00e2ches. T\u00e2ches stage build(construire) et la t\u00e2che build-job build-job: stage: build script: - echo \"Hello, $GITLAB_USER_LOGIN!\" Cette t\u00e2che utilise le stage build et un autre \u00e9lement entre en compte ici, c'est le mot cl\u00e9 script qui permet de sp\u00e9cifier ce que la t\u00e2che doit faire. Comme par exemple afficher Hello l'utisateur gitlab dans notre cas. Les t\u00e2ches test-job1 && test-job2 et le stage test test-job1: stage: test script: - echo \"This job tests something\" test-job2: stage: test script: - echo \"This job tests something, but takes more time than test-job1.\" - echo \"After the echo commands complete, it runs the sleep command for 20 seconds\" - echo \"which simulates a test that runs 20 seconds longer than test-job1\" - sleep 20 Comme vous pouvez le constater dans les scripts il est clairement mentionn\u00e9 ce que fait les scripts. La t\u00e2che deploy-prod && le stage deploy deploy-prod: stage: deploy script: - echo \"This job deploys something from the $CI_COMMIT_BRANCH branch.\" Comme vous pouvez le constater dans les scripts il est clairement mentionn\u00e9 ce que fait le script. Il deploie quelque chose sur la branche du commit. NB: ceci n'est qu'une introduction \u00e0 gitlab-ci.yml","title":"Explication"},{"location":"gitlab_ci/#conclusion","text":"Ce tutorial arrive \u00e0 sa fin. Pour avoir plus d'informations sur Gitlab-ci.yml, je vous invite \u00e0 visit\u00e9 le site de GITLAB. , qui by the way is amazing!","title":"Conclusion"},{"location":"good-to-know/","text":"Good to know Trivy Un scanner de vuln\u00e9rabilit\u00e9 open-source, sp\u00e9cialis\u00e9 dans les conteneurs et les artefacts, adapt\u00e9 aux environnements CI. Il identifie et signale les vuln\u00e9rabilit\u00e9s, garantissant la s\u00e9curit\u00e9 des applications. Cadvisor Un outil de surveillance open-source pour les conteneurs Docker, fournissant des m\u00e9triques d\u00e9taill\u00e9es sur l'utilisation des ressources et les performances, essentiel pour l'optimisation des applications. Node Exporter Un outil open-source de collecte de m\u00e9triques pour les syst\u00e8mes Unix, fournissant des donn\u00e9es d\u00e9taill\u00e9es sur l'utilisation des ressources et les performances, essentiel pour la surveillance syst\u00e8me. Uptime Kuma Un outil open-source de surveillance des performances des sites web et des serveurs, offrant des informations en temps r\u00e9el sur l'accessibilit\u00e9 et la disponibilit\u00e9 des services en ligne. Prometheus Blackbox Un exporter est un composant de Prometheus permettant la surveillance externe des services en simulant des requ\u00eates r\u00e9seau. Il v\u00e9rifie la disponibilit\u00e9 et les performances des services, fournissant des donn\u00e9es pr\u00e9cieuses pour la surveillance des syst\u00e8mes.","title":"Good to know"},{"location":"good-to-know/#good-to-know","text":"","title":"Good to know"},{"location":"good-to-know/#trivy","text":"Un scanner de vuln\u00e9rabilit\u00e9 open-source, sp\u00e9cialis\u00e9 dans les conteneurs et les artefacts, adapt\u00e9 aux environnements CI. Il identifie et signale les vuln\u00e9rabilit\u00e9s, garantissant la s\u00e9curit\u00e9 des applications.","title":"Trivy"},{"location":"good-to-know/#cadvisor","text":"Un outil de surveillance open-source pour les conteneurs Docker, fournissant des m\u00e9triques d\u00e9taill\u00e9es sur l'utilisation des ressources et les performances, essentiel pour l'optimisation des applications.","title":"Cadvisor"},{"location":"good-to-know/#node-exporter","text":"Un outil open-source de collecte de m\u00e9triques pour les syst\u00e8mes Unix, fournissant des donn\u00e9es d\u00e9taill\u00e9es sur l'utilisation des ressources et les performances, essentiel pour la surveillance syst\u00e8me.","title":"Node Exporter"},{"location":"good-to-know/#uptime-kuma","text":"Un outil open-source de surveillance des performances des sites web et des serveurs, offrant des informations en temps r\u00e9el sur l'accessibilit\u00e9 et la disponibilit\u00e9 des services en ligne.","title":"Uptime Kuma"},{"location":"good-to-know/#prometheus-blackbox","text":"Un exporter est un composant de Prometheus permettant la surveillance externe des services en simulant des requ\u00eates r\u00e9seau. Il v\u00e9rifie la disponibilit\u00e9 et les performances des services, fournissant des donn\u00e9es pr\u00e9cieuses pour la surveillance des syst\u00e8mes.","title":"Prometheus Blackbox"},{"location":"happy-path-and-edge-cases/","text":"Happy path and edge cases Un nouveau concept qui est tr\u00e8s important dans les tests. Le \"edge cases and happy path\" deux termes contraires mais tr\u00e8s importants. Ils seront d\u00e9finis dans la section qui est en bas et un exemple de chacun sera donn\u00e9. L'un est pour les cas extr\u00eames et l'autre pour les cas o\u00f9 l'on s'attend \u00e0 une chose et on l'obtient si on suit le bon chemin. happy path c'est le chemin qui, si on le suit rien de f\u00e2cheux n'arrivera. Exemple : si vous voulez de l'argent \u00e0 la banque, il faut mettre sa carte et mettre le bon code et aussi qu'il y ait de l'argent au distributeur si tout ceci r\u00e9unit, vous obtiendrez s\u00fbrement votre argent et c'est le happy path . Edge case c'est un probl\u00e8me ou une situation qui arrive seulement dans l'extr\u00eame par exemple, si un ballon est rempli d'air plus qu'il n'en pouvait contenir peut finir par se casser m\u00eame sans qu'il n'y ait un autre param\u00e8tre de destruction. Exemple : une fonction qui calcule qui divise deux nombres pourrait \u00eatre test\u00e9 en utilisant des nombres tr\u00e8s gros et tr\u00e8s petits aussi. Cela dit l'avant est de voir que la fonction marche dans les bords et au centre donc elle marchera avec les nombres entre ce petit et ce grand nombre. Conclusion Ce tutoriel \u00e9tait une explication simple et rapide d'un concept souvent utilis\u00e9 dans les tests, mais dont les gens ne savent pas le nom ou certains ne l'utilisent pas. En esp\u00e9rant qu'\u00e0 partir de maintenant, vous tiendrez compte de ce concept dans vos tests. \u00c0 bient\u00f4t :D","title":"Happy path and edge cases"},{"location":"happy-path-and-edge-cases/#happy-path-and-edge-cases","text":"Un nouveau concept qui est tr\u00e8s important dans les tests. Le \"edge cases and happy path\" deux termes contraires mais tr\u00e8s importants. Ils seront d\u00e9finis dans la section qui est en bas et un exemple de chacun sera donn\u00e9. L'un est pour les cas extr\u00eames et l'autre pour les cas o\u00f9 l'on s'attend \u00e0 une chose et on l'obtient si on suit le bon chemin.","title":"Happy path and edge cases"},{"location":"happy-path-and-edge-cases/#happy-path","text":"c'est le chemin qui, si on le suit rien de f\u00e2cheux n'arrivera. Exemple : si vous voulez de l'argent \u00e0 la banque, il faut mettre sa carte et mettre le bon code et aussi qu'il y ait de l'argent au distributeur si tout ceci r\u00e9unit, vous obtiendrez s\u00fbrement votre argent et c'est le happy path .","title":"happy path"},{"location":"happy-path-and-edge-cases/#edge-case","text":"c'est un probl\u00e8me ou une situation qui arrive seulement dans l'extr\u00eame par exemple, si un ballon est rempli d'air plus qu'il n'en pouvait contenir peut finir par se casser m\u00eame sans qu'il n'y ait un autre param\u00e8tre de destruction. Exemple : une fonction qui calcule qui divise deux nombres pourrait \u00eatre test\u00e9 en utilisant des nombres tr\u00e8s gros et tr\u00e8s petits aussi. Cela dit l'avant est de voir que la fonction marche dans les bords et au centre donc elle marchera avec les nombres entre ce petit et ce grand nombre.","title":"Edge case"},{"location":"happy-path-and-edge-cases/#conclusion","text":"Ce tutoriel \u00e9tait une explication simple et rapide d'un concept souvent utilis\u00e9 dans les tests, mais dont les gens ne savent pas le nom ou certains ne l'utilisent pas. En esp\u00e9rant qu'\u00e0 partir de maintenant, vous tiendrez compte de ce concept dans vos tests. \u00c0 bient\u00f4t :D","title":"Conclusion"},{"location":"npm-vs-npx/","text":"NPX vs NPM NPX : Un ex\u00e9cuteur de packages npm NPX est un outil permettant d'ex\u00e9cuter des packages Node.js et n\u00e9cessite NPM version 5.2+ pour fonctionner. Lorsqu'une commande est lanc\u00e9e via NPX, il v\u00e9rifie si cette commande existe dans le chemin d'acc\u00e8s ($PATH) ou dans les binaires du projet local, puis l'ex\u00e9cute. npx mes-packages Un avantage majeur de NPX est sa capacit\u00e9 \u00e0 ex\u00e9cuter un package qui n'a pas \u00e9t\u00e9 pr\u00e9alablement install\u00e9. npx create-react-app my-app NPM : Lorsque vous lancez npm install mes-packages , cela installe un paquet localement dans un projet sp\u00e9cifique. Imaginons maintenant que vous vouliez ex\u00e9cuter ce package depuis la ligne de commande de Node.js. Vous devriez sp\u00e9cifier le chemin du package de la mani\u00e8re suivante : ./node_modules/.bin/mes-packages Pour en savoir plus sur NPM, consultez la documentation NPM .","title":"Npm vs npx"},{"location":"npm-vs-npx/#npx-vs-npm","text":"","title":"NPX vs NPM"},{"location":"npm-vs-npx/#npx-un-executeur-de-packages-npm","text":"NPX est un outil permettant d'ex\u00e9cuter des packages Node.js et n\u00e9cessite NPM version 5.2+ pour fonctionner. Lorsqu'une commande est lanc\u00e9e via NPX, il v\u00e9rifie si cette commande existe dans le chemin d'acc\u00e8s ($PATH) ou dans les binaires du projet local, puis l'ex\u00e9cute. npx mes-packages Un avantage majeur de NPX est sa capacit\u00e9 \u00e0 ex\u00e9cuter un package qui n'a pas \u00e9t\u00e9 pr\u00e9alablement install\u00e9. npx create-react-app my-app","title":"NPX : Un ex\u00e9cuteur de packages npm"},{"location":"npm-vs-npx/#npm","text":"Lorsque vous lancez npm install mes-packages , cela installe un paquet localement dans un projet sp\u00e9cifique. Imaginons maintenant que vous vouliez ex\u00e9cuter ce package depuis la ligne de commande de Node.js. Vous devriez sp\u00e9cifier le chemin du package de la mani\u00e8re suivante : ./node_modules/.bin/mes-packages Pour en savoir plus sur NPM, consultez la documentation NPM .","title":"NPM :"},{"location":"python-/","text":"Python installation Yeeyyyy!!!!! Un autre language \ud83d\ude00!! Python est un langage de programmation multiplateforme que nous pouvons donc ex\u00e9cuter sur plusieurs plates-formes telles que Windows, macOS, Linux. Il est totalement gratuit et open source. ** \ud83d\ude2c Oh mince j'ai Linux !** Si vous avez Linux ou Mac vous verrez qu'il est d\u00e9j\u00e0 install\u00e9 sauf que la plupart des versions install\u00e9es sont obsol\u00e8tes ainsi, c'est \u00e0 vous d'installer la nouvelle version ou la version de travail qu'il vous faut. Dans ce tutoriel nous travaillerons exclusivement sur Ubuntu Installation Je vous mets le lien de la documentation pour le t\u00e9l\u00e9chargement ou l'obtention du package. T\u00e9l\u00e9chargez la derni\u00e8re version de Python. Plus sp\u00e9cifiquement pour Ubuntu : Mis \u00e0 jour des packages et install\u00e9 les pr\u00e9requis : sudo apt update sudo apt install software-properties-common Ajoutez le PPA deadsnakes \u00e0 la liste des sources de votre syst\u00e8me ( c'est quoi un PPA? ): sudo add-apt-repository ppa:deadsnakes/ppa Maintenant installons python 3.9 : sudo apt install python3.9 V\u00e9rifions si python s'est bien install\u00e9 : python3.9 --version Test d'installation En haut nous avons install\u00e9 python3.9, maintenant \u00e9crivons notre premier programme en python. print(\"Hello world !\") Nom = \"Barry\" print(Nom) age = 3 taille = 2.01 liste_nombre = [1,2,3,4] Nom , age, taille = \"Barry\", 3, 2.01 print(Nom) Conclusion Dans ce tutoriel, nous avons vu comment installer python sur Linux, dans les prochains tutos, nous verrons quelques notions en python, telle que les fonctions, les listes compr\u00e9hension, les classes, les modules, les tests unitaires, tests end-to-ends and so on...","title":"Python installation"},{"location":"python-/#python-installation","text":"Yeeyyyy!!!!! Un autre language \ud83d\ude00!! Python est un langage de programmation multiplateforme que nous pouvons donc ex\u00e9cuter sur plusieurs plates-formes telles que Windows, macOS, Linux. Il est totalement gratuit et open source. ** \ud83d\ude2c Oh mince j'ai Linux !** Si vous avez Linux ou Mac vous verrez qu'il est d\u00e9j\u00e0 install\u00e9 sauf que la plupart des versions install\u00e9es sont obsol\u00e8tes ainsi, c'est \u00e0 vous d'installer la nouvelle version ou la version de travail qu'il vous faut. Dans ce tutoriel nous travaillerons exclusivement sur Ubuntu","title":"Python installation"},{"location":"python-/#installation","text":"Je vous mets le lien de la documentation pour le t\u00e9l\u00e9chargement ou l'obtention du package. T\u00e9l\u00e9chargez la derni\u00e8re version de Python. Plus sp\u00e9cifiquement pour Ubuntu : Mis \u00e0 jour des packages et install\u00e9 les pr\u00e9requis : sudo apt update sudo apt install software-properties-common Ajoutez le PPA deadsnakes \u00e0 la liste des sources de votre syst\u00e8me ( c'est quoi un PPA? ): sudo add-apt-repository ppa:deadsnakes/ppa Maintenant installons python 3.9 : sudo apt install python3.9 V\u00e9rifions si python s'est bien install\u00e9 : python3.9 --version","title":"Installation"},{"location":"python-/#test-dinstallation","text":"En haut nous avons install\u00e9 python3.9, maintenant \u00e9crivons notre premier programme en python. print(\"Hello world !\") Nom = \"Barry\" print(Nom) age = 3 taille = 2.01 liste_nombre = [1,2,3,4] Nom , age, taille = \"Barry\", 3, 2.01 print(Nom)","title":"Test d'installation"},{"location":"python-/#conclusion","text":"Dans ce tutoriel, nous avons vu comment installer python sur Linux, dans les prochains tutos, nous verrons quelques notions en python, telle que les fonctions, les listes compr\u00e9hension, les classes, les modules, les tests unitaires, tests end-to-ends and so on...","title":"Conclusion"},{"location":"python-commandes/","text":"Python commandes utiles Cette commande permet de connaitre les packages install\u00e9s dans notre projet python3 -m pip freeze G\u00e9n\u00e9rez un \"requirements file\" , puis installez les packages \u00e0 partir de celui-ci dans un autre environnement. python3 -m pip freeze >> requirements.txt","title":"Python commandes utiles"},{"location":"python-commandes/#python-commandes-utiles","text":"Cette commande permet de connaitre les packages install\u00e9s dans notre projet python3 -m pip freeze G\u00e9n\u00e9rez un \"requirements file\" , puis installez les packages \u00e0 partir de celui-ci dans un autre environnement. python3 -m pip freeze >> requirements.txt","title":"Python commandes utiles"},{"location":"python-functions/","text":"Python fonctions Les fonctions !!! \ud83d\ude00!! Introduction Les fonctions en Python sont des blocs de code r\u00e9utilisables qui permettent d'organiser et de structurer un programme. Elles simplifient la gestion de t\u00e2ches sp\u00e9cifiques en les encapsulant dans des unit\u00e9s logiques. La d\u00e9finition d'une fonction se fait \u00e0 l'aide du mot-cl\u00e9 def , suivi du nom de la fonction et de ses param\u00e8tres. Dans cette section, nous explorerons la syntaxe de base d'une fonction en Python. Syntaxe de base def nom_de_la_fonction(parametre1, parametre2, ...): \"\"\" Documentation de la fonction (docstring) \"\"\" # Code de la fonction # ... return resultat def : Mot-cl\u00e9 pour d\u00e9finir une fonction. nom_de_la_fonction : Identificateur de la fonction. (parametre1, parametre2, ...) : Liste des param\u00e8tres d'entr\u00e9e. : : Marque le d\u00e9but du bloc de code de la fonction. \"\"\"Documentation de la fonction\"\"\" : Docstring pour documenter la fonction. return resultat : Instruction pour renvoyer une valeur en sortie. Fonctionnement Une fois une fonction d\u00e9finie, elle peut \u00eatre appel\u00e9e en fournissant les valeurs n\u00e9cessaires aux param\u00e8tres. Le bloc de code \u00e0 l'int\u00e9rieur de la fonction s'ex\u00e9cute, effectuant la t\u00e2che sp\u00e9cifique d\u00e9finie. Les fonctions peuvent \u00e9galement avoir des param\u00e8tres avec des valeurs par d\u00e9faut, ce qui simplifie l'appel de la fonction avec moins de param\u00e8tres. Exemple def addition(a, b): \"\"\" Cette fonction prend deux nombres en entr\u00e9e et renvoie leur somme. \"\"\" resultat = a + b return resultat Appel de fonction resultat_addition = addition(3, 5) print(resultat_addition) # Affiche 8 Valeurs par d\u00e9faut des param\u00e8tres def multiplication(x, y=2): \"\"\" Cette fonction multiplie deux nombres, le deuxi\u00e8me param\u00e8tre a une valeur par d\u00e9faut de 2. \"\"\" resultat = x * y return resultat resultat_multiplication = multiplication(4) print(resultat_multiplication) # Affiche 8 Nombre variable de param\u00e8tres def somme_variable(*args): \"\"\" Cette fonction prend un nombre variable d'arguments et renvoie leur somme. \"\"\" resultat = sum(args) return resultat print(somme_variable(1, 2, 3)) # Affiche 6 print(somme_variable(1, 2, 3, 4, 5)) # Affiche 15 Conclusion Les fonctions sont un \u00e9l\u00e9ment essentiel de la programmation en Python. Elles favorisent la r\u00e9utilisabilit\u00e9 du code, la modularit\u00e9 et une meilleure organisation du programme. En documentant vos fonctions \u00e0 l'aide de docstrings, vous facilitez la compr\u00e9hension du code pour vous-m\u00eame et pour d'autres d\u00e9veloppeurs. Les param\u00e8tres par d\u00e9faut et le nombre variable de param\u00e8tres offrent une flexibilit\u00e9 accrue lors de la conception de fonctions. En int\u00e9grant judicieusement les fonctions dans votre code, vous contribuerez \u00e0 cr\u00e9er des programmes plus clairs, plus efficaces et plus faciles \u00e0 maintenir.","title":"Python fonctions"},{"location":"python-functions/#python-fonctions","text":"Les fonctions !!! \ud83d\ude00!!","title":"Python fonctions"},{"location":"python-functions/#introduction","text":"Les fonctions en Python sont des blocs de code r\u00e9utilisables qui permettent d'organiser et de structurer un programme. Elles simplifient la gestion de t\u00e2ches sp\u00e9cifiques en les encapsulant dans des unit\u00e9s logiques. La d\u00e9finition d'une fonction se fait \u00e0 l'aide du mot-cl\u00e9 def , suivi du nom de la fonction et de ses param\u00e8tres. Dans cette section, nous explorerons la syntaxe de base d'une fonction en Python.","title":"Introduction"},{"location":"python-functions/#syntaxe-de-base","text":"def nom_de_la_fonction(parametre1, parametre2, ...): \"\"\" Documentation de la fonction (docstring) \"\"\" # Code de la fonction # ... return resultat def : Mot-cl\u00e9 pour d\u00e9finir une fonction. nom_de_la_fonction : Identificateur de la fonction. (parametre1, parametre2, ...) : Liste des param\u00e8tres d'entr\u00e9e. : : Marque le d\u00e9but du bloc de code de la fonction. \"\"\"Documentation de la fonction\"\"\" : Docstring pour documenter la fonction. return resultat : Instruction pour renvoyer une valeur en sortie.","title":"Syntaxe de base"},{"location":"python-functions/#fonctionnement","text":"Une fois une fonction d\u00e9finie, elle peut \u00eatre appel\u00e9e en fournissant les valeurs n\u00e9cessaires aux param\u00e8tres. Le bloc de code \u00e0 l'int\u00e9rieur de la fonction s'ex\u00e9cute, effectuant la t\u00e2che sp\u00e9cifique d\u00e9finie. Les fonctions peuvent \u00e9galement avoir des param\u00e8tres avec des valeurs par d\u00e9faut, ce qui simplifie l'appel de la fonction avec moins de param\u00e8tres.","title":"Fonctionnement"},{"location":"python-functions/#exemple","text":"def addition(a, b): \"\"\" Cette fonction prend deux nombres en entr\u00e9e et renvoie leur somme. \"\"\" resultat = a + b return resultat","title":"Exemple"},{"location":"python-functions/#appel-de-fonction","text":"resultat_addition = addition(3, 5) print(resultat_addition) # Affiche 8","title":"Appel de fonction"},{"location":"python-functions/#valeurs-par-defaut-des-parametres","text":"def multiplication(x, y=2): \"\"\" Cette fonction multiplie deux nombres, le deuxi\u00e8me param\u00e8tre a une valeur par d\u00e9faut de 2. \"\"\" resultat = x * y return resultat resultat_multiplication = multiplication(4) print(resultat_multiplication) # Affiche 8","title":"Valeurs par d\u00e9faut des param\u00e8tres"},{"location":"python-functions/#nombre-variable-de-parametres","text":"def somme_variable(*args): \"\"\" Cette fonction prend un nombre variable d'arguments et renvoie leur somme. \"\"\" resultat = sum(args) return resultat print(somme_variable(1, 2, 3)) # Affiche 6 print(somme_variable(1, 2, 3, 4, 5)) # Affiche 15","title":"Nombre variable de param\u00e8tres"},{"location":"python-functions/#conclusion","text":"Les fonctions sont un \u00e9l\u00e9ment essentiel de la programmation en Python. Elles favorisent la r\u00e9utilisabilit\u00e9 du code, la modularit\u00e9 et une meilleure organisation du programme. En documentant vos fonctions \u00e0 l'aide de docstrings, vous facilitez la compr\u00e9hension du code pour vous-m\u00eame et pour d'autres d\u00e9veloppeurs. Les param\u00e8tres par d\u00e9faut et le nombre variable de param\u00e8tres offrent une flexibilit\u00e9 accrue lors de la conception de fonctions. En int\u00e9grant judicieusement les fonctions dans votre code, vous contribuerez \u00e0 cr\u00e9er des programmes plus clairs, plus efficaces et plus faciles \u00e0 maintenir.","title":"Conclusion"},{"location":"react-native/","text":"React Native Hey encore une chose de decouvert \ud83d\ude01 Parlons React mais pas just React mais native qui signifie que notre application tournera sur ios et android car React Native est cross-plateform. J'ai decouvert React et je partage l'aventure avec vous \ud83e\udd37. c'\u00e9tait un monde dans une planete \ud83c\udf20 lointaine mais proche de Angular. D\u00e9marrer Hi \ud83d\udc4b!!!! Alors installons tout ce dont on a besoin pour commencer Installe NodeJs sudo apt install nodejs Verifier l'installation node --version Installe Expo CLI J'ai decouvert ce framwork \"expo\" qui est magnifique, je vous mets le lien \ud83d\udc49 EXPO npm install --global expo-cli Cr\u00e9er un projet expo init books Demarrer l'application expo start Les composants capitaux Nous avons 7 composants principaux Un composant est une classe(transmettre des props) ou une fonction(mais elle renvoie rarement des props). La mani\u00e8re la plus simple de definir un component est de cr\u00e9er une fonction JavaScript. Nous appelons ces composants \"composants de fonction\" car il s'agit litt\u00e9ralement de fonctions JavaScript. import React from \"react\"; import { Text, View } from \"react-native\"; const HelloWorldApp = () => { return ( <View style={{ flex: 1, justifyContent: \"center\", alignItems: \"center\", }} > <Text>Hello, world!</Text> </View> ); }; export default HelloWorldApp; Les deux composants ci-dessus sont \u00e9quivalents du point de vue de React. import React, { Component } from \"react\"; import { Text, View } from \"react-native\"; class HelloWorldApp extends Component { render() { return ( <View style={{ flex: 1, justifyContent: \"center\", alignItems: \"center\", }} > <Text>Hello, world!</Text> </View> ); } } export default HelloWorldApp; 1- Les Vues(View) Les vues ici sont appell\u00e9es \"user interface view sur Ios et android view sur android\", sachez aussi que dans cette planette il faut d\u00e9composer son application en composants \u26a0\ufe0f tout en \u00e9vitant d'avoir une panopluie de composant. Car, ceci est d\u00e9conseill\u00e9. Style in line signifie que nous aurons deux accolades \"{{}}\" au niveau de style et on ne va pas l'\u00e9crire sur plusieurs lignes La premi\u00e8re signifie JavaScript et le second car c'est en inline //Dans App.js import React from \"react\"; import { Text, View } from \"react-native\"; const App = () => { return <View style={{ borderWidth: 1, height: 150, width: 150 }}></View>; }; export default App; Bon \u00e9coutez je ne vais pas faire un cours, donc je vous donne encore un truc que je viens juste de capter. Le mot cl\u00e9 Export Le mots cl\u00e9 \"export\" pour utiliser un composant dans un autre il faut que dans le fichier o\u00f9 est defini le component l'exporter apr\u00e8s sa definition, et l'importer dans le fichier o\u00f9 on l'utilise. Ehh bhenn je viens de dire une chose truvial l\u00e0 \ud83d\ude05 mais bon voici un exmple 2- Le composant Text React n'accept pas les textes brutes donc il faut un composant texte pour la manipulation de texte //Dans App.js <Text style={{ color:\"white\", fontSize:20, fontWeight:\"bold\"}}>Bonjour Monsieur</Text> 3- Le composant StyleSheet comme son nom l'indique il permet d'ecrire du css plus styl\u00e9 \ud83d\ude0e //Dans App.js import React from \"react\"; import { Text, View, StyleSheet } from \"react-native\"; const App = () => { return ( <View style={styles.container}> <Text style={styles.text}>Bonjour Monsieur</Text> </View> ); }; const styles = StyleSheet.create({ container: { borderWidth: 1, height: \"100%\", width: \"100%\", backgroundColor: \"green\", justifyContent: \"center\", alignItems: \"center\", }, text: { color: \"white\", fontSize: 20, fontWeight: \"bold\", }, }); export default App; 4- Le composant textInput Un composant sans enfant\ud83d\ude27? Ehh oui c'est quand on le ferme juste \u00e0 la fin avec un \"/\" Au fur et \u00e0 mesure qu'on ecrit dans un champs de saisie React fait la mise \u00e0 jour donc pour eviter d'effacer ce que l'on \u00e9crit on utilise state. //Dans App.js import React, { useState } from \"react\"; import { Text, View, StyleSheet, TextInput } from \"react-native\"; const App = () => { const [state, setState] = useState(\"\"); return ( <View style={styles.container}> <Text style={styles.text}>Bonjour Monsieur</Text> <TextInput style={styles.input} placeholder=\"Saisir du texte\" value={state} onChangeText={(value) => setState(value)} /> </View> ); }; const styles = StyleSheet.create({ container: { flex: 1, borderWidth: 1, flexDirection: \"column\", height: \"100%\", width: \"100%\", backgroundColor: \"green\", justifyContent: \"center\", alignItems: \"center\", }, text: { color: \"white\", fontSize: 20, fontWeight: \"bold\", paddingBottom: 20, }, input: { borderWidth: 1, height: 30, width: 300, fontSize: 25, color: \"black\", }, }); export default App; Props et State Parlons des state et de props: Les props nous permettent de contr\u00f4ler un component, En langage plus technique, ils sont accessibles en lecture uniquement par le component fils. Attention,ne pensez pas que les props d'un component ne peuvent pas changer. Elles le peuvent ; simplement, c'est le component parent qui va les changer. C'est l\u00e0 qu'intervient \"state\" il nous permet de r\u00e9cuperer les nouvelles donn\u00e9es avec setState et indiquer \u00e0 React que le component a besoin d'\u00eatre re-rendu avec ces nouvelles donn\u00e9es. const [tasks, setTask] = useState([ { title: \"Nouvelle tache\", completed: false }, ]); Le state et les props g\u00e8rent les donn\u00e9es de vos components. 5- Le composant Image Soit from assets: importer d'abord l'image import LOGO from \"./assets/imgs.png\"; puis on lui met du css logo: { width: 66, height: 58, margin: 10, }, Enfin on met l'image dans une vue <View style={styles.containerIm}> <Image style={styles.logo} source={LOGO} /> </View> soit from une URL: <View style={styles.containerIm}> <Image style={styles.logo} source={{uri: \"https://reactnative.dev/img/tiny_logo.png\"}} /> </View> 6- Le composant ScrollView Il permet de faire defiler notre \u00e9cran quand on aura beaucoup d'\u00e9l\u00e9ments \u00e0 afficher. 7- Le composant FlatList FlatList fait en sorte que lorsque nos informations sont sur le point d'appara\u00eetre, il supprime les \u00e9l\u00e9ments qui d\u00e9filent hors de l'\u00e9cran pour \u00e9conomiser de la m\u00e9moire et du temps de traitement. Egalement si vous voulez afficher des s\u00e9parateurs entre vos \u00e9l\u00e9ments, plusieurs colonnes, un chargement de d\u00e9filement infini ou tout autre nombre d'autres fonctionnalit\u00e9s qu'il prend en charge imm\u00e9diatement. Code source: \ud83d\udc49here Navigation Installation\u200b Installons les packqges dont ont a besoin dans le projet sudo npm install @react-navigation/native sudo expo install react-native-gesture-handler react-native-reanimated react-native-screens react-native-safe-area-context @react-native-community/masked-view sudo npm install @react-navigation/stack Sources: openClassRooms React native doc","title":"React Native"},{"location":"react-native/#react-native","text":"Hey encore une chose de decouvert \ud83d\ude01 Parlons React mais pas just React mais native qui signifie que notre application tournera sur ios et android car React Native est cross-plateform. J'ai decouvert React et je partage l'aventure avec vous \ud83e\udd37. c'\u00e9tait un monde dans une planete \ud83c\udf20 lointaine mais proche de Angular.","title":"React Native"},{"location":"react-native/#demarrer","text":"Hi \ud83d\udc4b!!!! Alors installons tout ce dont on a besoin pour commencer","title":"D\u00e9marrer"},{"location":"react-native/#installe-nodejs","text":"sudo apt install nodejs","title":"Installe NodeJs"},{"location":"react-native/#verifier-linstallation","text":"node --version","title":"Verifier l'installation"},{"location":"react-native/#installe-expo-cli","text":"J'ai decouvert ce framwork \"expo\" qui est magnifique, je vous mets le lien \ud83d\udc49 EXPO npm install --global expo-cli","title":"Installe Expo CLI"},{"location":"react-native/#creer-un-projet","text":"expo init books","title":"Cr\u00e9er un projet"},{"location":"react-native/#demarrer-lapplication","text":"expo start","title":"Demarrer l'application"},{"location":"react-native/#les-composants-capitaux","text":"Nous avons 7 composants principaux Un composant est une classe(transmettre des props) ou une fonction(mais elle renvoie rarement des props). La mani\u00e8re la plus simple de definir un component est de cr\u00e9er une fonction JavaScript. Nous appelons ces composants \"composants de fonction\" car il s'agit litt\u00e9ralement de fonctions JavaScript. import React from \"react\"; import { Text, View } from \"react-native\"; const HelloWorldApp = () => { return ( <View style={{ flex: 1, justifyContent: \"center\", alignItems: \"center\", }} > <Text>Hello, world!</Text> </View> ); }; export default HelloWorldApp; Les deux composants ci-dessus sont \u00e9quivalents du point de vue de React. import React, { Component } from \"react\"; import { Text, View } from \"react-native\"; class HelloWorldApp extends Component { render() { return ( <View style={{ flex: 1, justifyContent: \"center\", alignItems: \"center\", }} > <Text>Hello, world!</Text> </View> ); } } export default HelloWorldApp;","title":"Les composants capitaux"},{"location":"react-native/#1-les-vuesview","text":"Les vues ici sont appell\u00e9es \"user interface view sur Ios et android view sur android\", sachez aussi que dans cette planette il faut d\u00e9composer son application en composants \u26a0\ufe0f tout en \u00e9vitant d'avoir une panopluie de composant. Car, ceci est d\u00e9conseill\u00e9. Style in line signifie que nous aurons deux accolades \"{{}}\" au niveau de style et on ne va pas l'\u00e9crire sur plusieurs lignes La premi\u00e8re signifie JavaScript et le second car c'est en inline //Dans App.js import React from \"react\"; import { Text, View } from \"react-native\"; const App = () => { return <View style={{ borderWidth: 1, height: 150, width: 150 }}></View>; }; export default App; Bon \u00e9coutez je ne vais pas faire un cours, donc je vous donne encore un truc que je viens juste de capter.","title":"1- Les Vues(View)"},{"location":"react-native/#2-le-composant-text","text":"React n'accept pas les textes brutes donc il faut un composant texte pour la manipulation de texte //Dans App.js <Text style={{ color:\"white\", fontSize:20, fontWeight:\"bold\"}}>Bonjour Monsieur</Text>","title":"2- Le composant Text"},{"location":"react-native/#3-le-composant-stylesheet","text":"comme son nom l'indique il permet d'ecrire du css plus styl\u00e9 \ud83d\ude0e //Dans App.js import React from \"react\"; import { Text, View, StyleSheet } from \"react-native\"; const App = () => { return ( <View style={styles.container}> <Text style={styles.text}>Bonjour Monsieur</Text> </View> ); }; const styles = StyleSheet.create({ container: { borderWidth: 1, height: \"100%\", width: \"100%\", backgroundColor: \"green\", justifyContent: \"center\", alignItems: \"center\", }, text: { color: \"white\", fontSize: 20, fontWeight: \"bold\", }, }); export default App;","title":"3- Le composant StyleSheet"},{"location":"react-native/#4-le-composant-textinput","text":"Un composant sans enfant\ud83d\ude27? Ehh oui c'est quand on le ferme juste \u00e0 la fin avec un \"/\" Au fur et \u00e0 mesure qu'on ecrit dans un champs de saisie React fait la mise \u00e0 jour donc pour eviter d'effacer ce que l'on \u00e9crit on utilise state. //Dans App.js import React, { useState } from \"react\"; import { Text, View, StyleSheet, TextInput } from \"react-native\"; const App = () => { const [state, setState] = useState(\"\"); return ( <View style={styles.container}> <Text style={styles.text}>Bonjour Monsieur</Text> <TextInput style={styles.input} placeholder=\"Saisir du texte\" value={state} onChangeText={(value) => setState(value)} /> </View> ); }; const styles = StyleSheet.create({ container: { flex: 1, borderWidth: 1, flexDirection: \"column\", height: \"100%\", width: \"100%\", backgroundColor: \"green\", justifyContent: \"center\", alignItems: \"center\", }, text: { color: \"white\", fontSize: 20, fontWeight: \"bold\", paddingBottom: 20, }, input: { borderWidth: 1, height: 30, width: 300, fontSize: 25, color: \"black\", }, }); export default App;","title":"4- Le composant textInput"},{"location":"react-native/#props-et-state","text":"Parlons des state et de props: Les props nous permettent de contr\u00f4ler un component, En langage plus technique, ils sont accessibles en lecture uniquement par le component fils. Attention,ne pensez pas que les props d'un component ne peuvent pas changer. Elles le peuvent ; simplement, c'est le component parent qui va les changer. C'est l\u00e0 qu'intervient \"state\" il nous permet de r\u00e9cuperer les nouvelles donn\u00e9es avec setState et indiquer \u00e0 React que le component a besoin d'\u00eatre re-rendu avec ces nouvelles donn\u00e9es. const [tasks, setTask] = useState([ { title: \"Nouvelle tache\", completed: false }, ]); Le state et les props g\u00e8rent les donn\u00e9es de vos components.","title":"Props et State"},{"location":"react-native/#5-le-composant-image","text":"","title":"5- Le composant Image"},{"location":"react-native/#soit-from-assets","text":"importer d'abord l'image import LOGO from \"./assets/imgs.png\"; puis on lui met du css logo: { width: 66, height: 58, margin: 10, }, Enfin on met l'image dans une vue <View style={styles.containerIm}> <Image style={styles.logo} source={LOGO} /> </View>","title":"Soit from assets:"},{"location":"react-native/#soit-from-une-url","text":"<View style={styles.containerIm}> <Image style={styles.logo} source={{uri: \"https://reactnative.dev/img/tiny_logo.png\"}} /> </View>","title":"soit from une URL:"},{"location":"react-native/#6-le-composant-scrollview","text":"Il permet de faire defiler notre \u00e9cran quand on aura beaucoup d'\u00e9l\u00e9ments \u00e0 afficher.","title":"6- Le composant ScrollView"},{"location":"react-native/#7-le-composant-flatlist","text":"FlatList fait en sorte que lorsque nos informations sont sur le point d'appara\u00eetre, il supprime les \u00e9l\u00e9ments qui d\u00e9filent hors de l'\u00e9cran pour \u00e9conomiser de la m\u00e9moire et du temps de traitement. Egalement si vous voulez afficher des s\u00e9parateurs entre vos \u00e9l\u00e9ments, plusieurs colonnes, un chargement de d\u00e9filement infini ou tout autre nombre d'autres fonctionnalit\u00e9s qu'il prend en charge imm\u00e9diatement. Code source: \ud83d\udc49here","title":"7- Le composant FlatList"},{"location":"react-native/#navigation","text":"","title":"Navigation"},{"location":"react-native/#installation","text":"Installons les packqges dont ont a besoin dans le projet sudo npm install @react-navigation/native sudo expo install react-native-gesture-handler react-native-reanimated react-native-screens react-native-safe-area-context @react-native-community/masked-view sudo npm install @react-navigation/stack Sources: openClassRooms React native doc","title":"Installation\u200b"},{"location":"tests/","text":"Tests logiciels Introduction \u00ab Tous les hommes sont mortels, or Socrate est un homme; donc Socrate est mortel \u00bb Chacun fait des erreurs dans cette vie, donc les d\u00e9veloppeurs aussi. Mal comprendre les exigences Manquer des points-virgules Manquer de compr\u00e9hension sur un sc\u00e9nario de cas marginal Ainsi, pour g\u00e9rer ces erreurs, les tests ont \u00e9t\u00e9 mis en place. Diff\u00e9rents types de tests. Il y a plusieurs types de test. Tests unitaires Tests d'int\u00e9grations Tests end-to-end(bout en bout) Fonctionnement 1-) Les tests unitaires : Ce sont les tests permettant de v\u00e9rifier le bon fonctionnement d'une partie pr\u00e9cise d'un logiciel ou d'une portion d'un programme. Exemple: Tester une fonction qui calcule la somme a et b #fonction somme def somme(a,b): return a+b # print True si 2+2=4 False sinon print( somme(2,2)==4) Donc notre fonciton marche bien. 2-) Les tests d'int\u00e9grations : Ce sont les tests permettant de v\u00e9rifier le bon fonctionnement d'une fonctionnalit\u00e9 ou d'un programme apr\u00e8s la combinaison de deux programmes qui marchait chacun de son c\u00f4t\u00e9. Exemple: Tester une fonction qui calcule la somme a et b. Pour cela nous utiliserons la fonction somme d'en haut avec une fonction qui prend en argument deux variables. def somme(a,b): return a+b print(\"la premi\u00e8re fonction somme => \", somme(2,2)==4) #fonction somme def somme_second(a,b): return a+b # print True si 2+2=4 False sinon print(\"la deuxi\u00e8me fonction somme => \", somme_second(3,2)==5) print(\"la combinaison des deux fonctions donnera\", somme_second(somme(2,2),2)==6) Donc notre fonciton marche bien. NB: Ce que nous venons de faire est d'int\u00e9grer la fonction somme dans le programme de somme_second et \u00e7a marche comme un \"chef\". 3-) Les tests end-to-end: Ce sont les tests permettant de v\u00e9rifier le bon fonctionnement d'une application sur tous les plans. Il teste si le bon input donne le bon output. Il teste le happy-path et edge-cases sont bien prise en compte. Il teste si l'input est chang\u00e9, quel message d'erreur s'affiche. Il teste si l'input change et que c'est une fonction ou une API quelle est la valeur/code e retour. Il teste les fonctionnalit\u00e9s critiques Il teste les fonctionnalit\u00e9s de base Il teste les fonctionnalit\u00e9s des cas extr\u00eames Il teste tout !! #fonction somme def somme(a,b): return a+b # Test le bon input donne le bon output print( somme(2,2)==4) # Test le happy path(1+1=2 quoi qu'il se passe ) print( somme(1,1)==2) # Si 1+1=2 alors un grand nombre donnera encore vrai print(somme(1023,2045)==3068) # test 1+1=3 doit donner False print( somme(1,1)==3) . Conclusion Ce tutoriel \u00e9tait une introduction aux tests en python dans un autre tuto, nous parlerons des tests avec le framework pytest qui est un outil tr\u00e8s puissant permettant d'\u00e9crire des tests intelligents sous le python.","title":"Tests logiciels"},{"location":"tests/#tests-logiciels","text":"","title":"Tests logiciels"},{"location":"tests/#introduction","text":"\u00ab Tous les hommes sont mortels, or Socrate est un homme; donc Socrate est mortel \u00bb Chacun fait des erreurs dans cette vie, donc les d\u00e9veloppeurs aussi. Mal comprendre les exigences Manquer des points-virgules Manquer de compr\u00e9hension sur un sc\u00e9nario de cas marginal Ainsi, pour g\u00e9rer ces erreurs, les tests ont \u00e9t\u00e9 mis en place.","title":"Introduction"},{"location":"tests/#differents-types-de-tests","text":"Il y a plusieurs types de test. Tests unitaires Tests d'int\u00e9grations Tests end-to-end(bout en bout)","title":"Diff\u00e9rents types de tests."},{"location":"tests/#fonctionnement","text":"","title":"Fonctionnement"},{"location":"tests/#1-les-tests-unitaires","text":"Ce sont les tests permettant de v\u00e9rifier le bon fonctionnement d'une partie pr\u00e9cise d'un logiciel ou d'une portion d'un programme. Exemple: Tester une fonction qui calcule la somme a et b #fonction somme def somme(a,b): return a+b # print True si 2+2=4 False sinon print( somme(2,2)==4) Donc notre fonciton marche bien.","title":"1-) Les tests unitaires :"},{"location":"tests/#2-les-tests-dintegrations","text":"Ce sont les tests permettant de v\u00e9rifier le bon fonctionnement d'une fonctionnalit\u00e9 ou d'un programme apr\u00e8s la combinaison de deux programmes qui marchait chacun de son c\u00f4t\u00e9. Exemple: Tester une fonction qui calcule la somme a et b. Pour cela nous utiliserons la fonction somme d'en haut avec une fonction qui prend en argument deux variables. def somme(a,b): return a+b print(\"la premi\u00e8re fonction somme => \", somme(2,2)==4) #fonction somme def somme_second(a,b): return a+b # print True si 2+2=4 False sinon print(\"la deuxi\u00e8me fonction somme => \", somme_second(3,2)==5) print(\"la combinaison des deux fonctions donnera\", somme_second(somme(2,2),2)==6) Donc notre fonciton marche bien. NB: Ce que nous venons de faire est d'int\u00e9grer la fonction somme dans le programme de somme_second et \u00e7a marche comme un \"chef\".","title":"2-) Les tests d'int\u00e9grations :"},{"location":"tests/#3-les-tests-end-to-end","text":"Ce sont les tests permettant de v\u00e9rifier le bon fonctionnement d'une application sur tous les plans. Il teste si le bon input donne le bon output. Il teste le happy-path et edge-cases sont bien prise en compte. Il teste si l'input est chang\u00e9, quel message d'erreur s'affiche. Il teste si l'input change et que c'est une fonction ou une API quelle est la valeur/code e retour. Il teste les fonctionnalit\u00e9s critiques Il teste les fonctionnalit\u00e9s de base Il teste les fonctionnalit\u00e9s des cas extr\u00eames Il teste tout !! #fonction somme def somme(a,b): return a+b # Test le bon input donne le bon output print( somme(2,2)==4) # Test le happy path(1+1=2 quoi qu'il se passe ) print( somme(1,1)==2) # Si 1+1=2 alors un grand nombre donnera encore vrai print(somme(1023,2045)==3068) # test 1+1=3 doit donner False print( somme(1,1)==3) .","title":"3-) Les tests end-to-end:"},{"location":"tests/#conclusion","text":"Ce tutoriel \u00e9tait une introduction aux tests en python dans un autre tuto, nous parlerons des tests avec le framework pytest qui est un outil tr\u00e8s puissant permettant d'\u00e9crire des tests intelligents sous le python.","title":"Conclusion"},{"location":"js/js/","text":"Javascript Bienvenue dans le cours de JavaScript pour les d\u00e9butants ! JavaScript est un langage de programmation tr\u00e8s puissant et populaire. Il est utilis\u00e9 pour cr\u00e9er des sites web interactifs et des applications web. Dans ce cours, nous allons apprendre les bases de JavaScript et comment l'utiliser pour cr\u00e9er des sites web et des applications. Comment cr\u00e9er des variables en JavaScript et comment les utiliser. Les deux mots-cl\u00e9s sont utilis\u00e9s pour d\u00e9clarer des variables en JavaScript. La principale diff\u00e9rence entre let et var est que let est une variable \u00e0 port\u00e9e de bloc, tandis que var est une variable \u00e0 port\u00e9e de fonction. Cela signifie que let est limit\u00e9 \u00e0 la port\u00e9e du bloc courant, tandis que var est limit\u00e9 \u00e0 la port\u00e9e de la fonction actuelle. Lorsqu'une variable est d\u00e9clar\u00e9e avec let ou var et n'est pas initialis\u00e9e, elle a une valeur par d\u00e9faut de undefined (\u00e0 la diff\u00e9rence des variables globales, qui ont une valeur par d\u00e9faut de null). Les diff\u00e9rents types de donn\u00e9es en JavaScript et comment les manipuler. Primitifs : Nombres : valeurs num\u00e9riques enti\u00e8res (1, 2, 3), flottants (1.2, 3.4), etc. Cha\u00eenes de caract\u00e8res : cha\u00eenes de caract\u00e8res entre guillemets simples ou doubles (\"foo\", 'bar'). Bool\u00e9ens : vrai ou faux (true, false). Symboles : uniques et immuables (Symbol()). Null : valeur null (null). Undefined : valeur ind\u00e9finie (undefined). Objets : Objets : une collection de propri\u00e9t\u00e9s (Object({})). Tableaux : une liste d'\u00e9l\u00e9ments (Array([])). Fonctions : une fonction JavaScript (Function()). Dates : une date dans un format sp\u00e9cifique (Date()). Expressions r\u00e9guli\u00e8res : une expression r\u00e9guli\u00e8re (RegExp()). Les fonctions JavaScript et comment les utiliser. JavaScript est un langage de programmation qui permet aux d\u00e9veloppeurs d'ajouter des fonctionnalit\u00e9s interactives \u00e0 des sites Web et des applications. Les fonctions JavaScript sont des blocs de code qui effectuent des actions sp\u00e9cifiques et qui peuvent \u00eatre r\u00e9utilis\u00e9s plusieurs fois dans un programme. Pour utiliser une fonction JavaScript, vous devez la d\u00e9clarer en sp\u00e9cifiant un nom et un ensemble d'arguments. Vous pouvez ensuite appeler la fonction pour ex\u00e9cuter le code d\u00e9fini \u00e0 l'int\u00e9rieur. Les arguments sont des valeurs que vous pouvez passer \u00e0 la fonction qui peuvent \u00eatre utilis\u00e9es pour modifier son comportement. Par exemple, la fonction Math.abs() est une fonction JavaScript qui calcule la valeur absolue d'un nombre donn\u00e9. Vous pouvez l'utiliser en l'appelant avec un argument, comme ceci : let x = Math.abs(-5); Cela affectera la variable x \u00e0 la valeur absolue, 5. Les fonctions JavaScript peuvent \u00e9galement retourner des valeurs, ce qui signifie qu'elles peuvent \u00eatre utilis\u00e9es dans des expressions. Par exemple, vous pouvez utiliser la fonction Math.min() pour calculer le plus petit nombre d'une liste de nombres : let smallest = Math.min(4, 6, 8, 10); Cela affectera la variable smallest \u00e0 la valeur 4. Cr\u00e9er une fonction JavaScript est tr\u00e8s simple. La syntaxe est la suivante: function nomDeFonction(param\u00e8tre1, param\u00e8tre2, etc.) { // Instructions dans la fonction } Par exemple, voici une fonction qui prend deux nombres en param\u00e8tres et retourne leur somme: function addNumbers(a, b) { return a + b; } Pour l'utiliser, vous pouvez simplement appeler la fonction en fournissant les arguments appropri\u00e9s: let result = addNumbers(2, 3); // result vaut 5 Les structures de contr\u00f4le et comment les utiliser pour cr\u00e9er des boucles et des conditions. Les structures de contr\u00f4le en javascript Les conditions : Elles permettent d\u2019ex\u00e9cuter ou non une ou plusieurs instructions selon le r\u00e9sultat d\u2019une comparaison. Les boucles : Elles permettent de r\u00e9p\u00e9ter un certain nombre de fois une instruction ou un bloc d\u2019instructions. Les switch : Elles permettent d\u2019ex\u00e9cuter un bloc d\u2019instructions en fonction d\u2019une valeur donn\u00e9e. Les fonctions : Elles permettent d\u2019ex\u00e9cuter un bloc d\u2019instructions \u00e0 partir d\u2019un seul appel. Les objets et comment les utiliser pour cr\u00e9er des structures de donn\u00e9es complexes. Les objets sont une des principales structures de donn\u00e9es utilis\u00e9es en JavaScript. Ils peuvent \u00eatre utilis\u00e9s pour stocker des donn\u00e9es complexes, telles que des tableaux, des objets imbriqu\u00e9s, des cha\u00eenes et des nombres. Les objets JavaScript sont tr\u00e8s puissants car ils peuvent \u00eatre utilis\u00e9s pour stocker des donn\u00e9es sous forme de cl\u00e9s et de valeurs. Les objets peuvent \u00e9galement \u00eatre imbriqu\u00e9s et manipul\u00e9s de mani\u00e8re dynamique. Les objets peuvent \u00eatre utilis\u00e9s pour cr\u00e9er des structures de donn\u00e9es complexes, telles que des listes, des tableaux multidimensionnels, des arbres et des graphes. Les objets sont \u00e9galement tr\u00e8s utiles lors de l'utilisation d'API et de biblioth\u00e8ques tierces, car ils peuvent \u00eatre utilis\u00e9s pour stocker et organiser des informations et des m\u00e9tadonn\u00e9es 1. Strings 2. Nombres 3. Booleens 4. Null 5. Symbole 6. Tableaux 7. Objet 8. Fonctions 9. Date 10. Erreurs Comment utiliser le DOM (Document Object Model) pour cr\u00e9er des interfaces utilisateur interactives. Le DOM est un mod\u00e8le orient\u00e9 objet qui permet aux d\u00e9veloppeurs de cr\u00e9er des interfaces utilisateur interactives. Il peut \u00eatre utilis\u00e9 pour cr\u00e9er des pages web dynamiques et int\u00e9gr\u00e9es aux applications web. Le DOM permet aux d\u00e9veloppeurs d'acc\u00e9der aux \u00e9l\u00e9ments HTML et XML, d'effectuer des modifications et de cr\u00e9er des \u00e9v\u00e9nements et des interactions. Les d\u00e9veloppeurs peuvent donc cr\u00e9er des interfaces utilisateur interactives en ajoutant des \u00e9l\u00e9ments HTML et XML \u00e0 une page web et en attachant des fonctionnalit\u00e9s et des comportements \u00e0 ces \u00e9l\u00e9ments. Par exemple, les d\u00e9veloppeurs peuvent cr\u00e9er des \u00e9v\u00e9nements sur des boutons, des liens et des images pour permettre \u00e0 l'utilisateur de cliquer et de naviguer sur la page web. Les d\u00e9veloppeurs peuvent \u00e9galement ajouter des fonctionnalit\u00e9s avanc\u00e9es telles \u00e9l\u00e9ments du DOM list //Affiche tous les \u00e9l\u00e9ments du DOM list document.querySelectorAll(\"*\"); Les biblioth\u00e8ques et frameworks JavaScript et comment les utiliser. Les biblioth\u00e8ques js liste React.js jQuery AngularJS Vue.js Node.js Polymer.js Backbone.js Ember.js Knockout.js Socket.io Les framework js liste Angular React Vue Ember Meteor Svelte Backbone Aurelia Polymer Knockout Comment d\u00e9boguer et tester votre code JavaScript. Utiliser des messages d'erreur et des alertes: Utiliser les outils de d\u00e9bogage int\u00e9gr\u00e9s: De nombreux navigateurs Web modernes comprennent des outils de d\u00e9bogage int\u00e9gr\u00e9s pour vous aider \u00e0 d\u00e9boguer votre code. Utiliser des outils externes: Il existe des outils externes d\u00e9di\u00e9s \u00e0 la d\u00e9boguation de JavaScript tels que Firebug et Chrome Developer Tools. Utiliser des biblioth\u00e8ques de d\u00e9bogage: Par exemple, vous pouvez utiliser la biblioth\u00e8que de d\u00e9bogage JavaScript Node.js pour trouver des erreurs, surveiller des variables et tracer des lignes de code. Ce cours est con\u00e7u pour les d\u00e9butants. Nous ne couvrirons pas les aspects avanc\u00e9s de JavaScript, mais vous donnerons les bases pour commencer \u00e0 apprendre le langage.","title":"Javascript"},{"location":"js/js/#javascript","text":"Bienvenue dans le cours de JavaScript pour les d\u00e9butants ! JavaScript est un langage de programmation tr\u00e8s puissant et populaire. Il est utilis\u00e9 pour cr\u00e9er des sites web interactifs et des applications web. Dans ce cours, nous allons apprendre les bases de JavaScript et comment l'utiliser pour cr\u00e9er des sites web et des applications.","title":"Javascript"},{"location":"js/js/#comment-creer-des-variables-en-javascript-et-comment-les-utiliser","text":"Les deux mots-cl\u00e9s sont utilis\u00e9s pour d\u00e9clarer des variables en JavaScript. La principale diff\u00e9rence entre let et var est que let est une variable \u00e0 port\u00e9e de bloc, tandis que var est une variable \u00e0 port\u00e9e de fonction. Cela signifie que let est limit\u00e9 \u00e0 la port\u00e9e du bloc courant, tandis que var est limit\u00e9 \u00e0 la port\u00e9e de la fonction actuelle. Lorsqu'une variable est d\u00e9clar\u00e9e avec let ou var et n'est pas initialis\u00e9e, elle a une valeur par d\u00e9faut de undefined (\u00e0 la diff\u00e9rence des variables globales, qui ont une valeur par d\u00e9faut de null).","title":"Comment cr\u00e9er des variables en JavaScript et comment les utiliser."},{"location":"js/js/#les-differents-types-de-donnees-en-javascript-et-comment-les-manipuler","text":"Primitifs : Nombres : valeurs num\u00e9riques enti\u00e8res (1, 2, 3), flottants (1.2, 3.4), etc. Cha\u00eenes de caract\u00e8res : cha\u00eenes de caract\u00e8res entre guillemets simples ou doubles (\"foo\", 'bar'). Bool\u00e9ens : vrai ou faux (true, false). Symboles : uniques et immuables (Symbol()). Null : valeur null (null). Undefined : valeur ind\u00e9finie (undefined). Objets : Objets : une collection de propri\u00e9t\u00e9s (Object({})). Tableaux : une liste d'\u00e9l\u00e9ments (Array([])). Fonctions : une fonction JavaScript (Function()). Dates : une date dans un format sp\u00e9cifique (Date()). Expressions r\u00e9guli\u00e8res : une expression r\u00e9guli\u00e8re (RegExp()).","title":"Les diff\u00e9rents types de donn\u00e9es en JavaScript et comment les manipuler."},{"location":"js/js/#les-fonctions-javascript-et-comment-les-utiliser","text":"JavaScript est un langage de programmation qui permet aux d\u00e9veloppeurs d'ajouter des fonctionnalit\u00e9s interactives \u00e0 des sites Web et des applications. Les fonctions JavaScript sont des blocs de code qui effectuent des actions sp\u00e9cifiques et qui peuvent \u00eatre r\u00e9utilis\u00e9s plusieurs fois dans un programme. Pour utiliser une fonction JavaScript, vous devez la d\u00e9clarer en sp\u00e9cifiant un nom et un ensemble d'arguments. Vous pouvez ensuite appeler la fonction pour ex\u00e9cuter le code d\u00e9fini \u00e0 l'int\u00e9rieur. Les arguments sont des valeurs que vous pouvez passer \u00e0 la fonction qui peuvent \u00eatre utilis\u00e9es pour modifier son comportement. Par exemple, la fonction Math.abs() est une fonction JavaScript qui calcule la valeur absolue d'un nombre donn\u00e9. Vous pouvez l'utiliser en l'appelant avec un argument, comme ceci : let x = Math.abs(-5); Cela affectera la variable x \u00e0 la valeur absolue, 5. Les fonctions JavaScript peuvent \u00e9galement retourner des valeurs, ce qui signifie qu'elles peuvent \u00eatre utilis\u00e9es dans des expressions. Par exemple, vous pouvez utiliser la fonction Math.min() pour calculer le plus petit nombre d'une liste de nombres : let smallest = Math.min(4, 6, 8, 10); Cela affectera la variable smallest \u00e0 la valeur 4. Cr\u00e9er une fonction JavaScript est tr\u00e8s simple. La syntaxe est la suivante: function nomDeFonction(param\u00e8tre1, param\u00e8tre2, etc.) { // Instructions dans la fonction } Par exemple, voici une fonction qui prend deux nombres en param\u00e8tres et retourne leur somme: function addNumbers(a, b) { return a + b; } Pour l'utiliser, vous pouvez simplement appeler la fonction en fournissant les arguments appropri\u00e9s: let result = addNumbers(2, 3); // result vaut 5","title":"Les fonctions JavaScript et comment les utiliser."},{"location":"js/js/#les-structures-de-controle-et-comment-les-utiliser-pour-creer-des-boucles-et-des-conditions","text":"Les structures de contr\u00f4le en javascript Les conditions : Elles permettent d\u2019ex\u00e9cuter ou non une ou plusieurs instructions selon le r\u00e9sultat d\u2019une comparaison. Les boucles : Elles permettent de r\u00e9p\u00e9ter un certain nombre de fois une instruction ou un bloc d\u2019instructions. Les switch : Elles permettent d\u2019ex\u00e9cuter un bloc d\u2019instructions en fonction d\u2019une valeur donn\u00e9e. Les fonctions : Elles permettent d\u2019ex\u00e9cuter un bloc d\u2019instructions \u00e0 partir d\u2019un seul appel.","title":"Les structures de contr\u00f4le et comment les utiliser pour cr\u00e9er des boucles et des conditions."},{"location":"js/js/#les-objets-et-comment-les-utiliser-pour-creer-des-structures-de-donnees-complexes","text":"Les objets sont une des principales structures de donn\u00e9es utilis\u00e9es en JavaScript. Ils peuvent \u00eatre utilis\u00e9s pour stocker des donn\u00e9es complexes, telles que des tableaux, des objets imbriqu\u00e9s, des cha\u00eenes et des nombres. Les objets JavaScript sont tr\u00e8s puissants car ils peuvent \u00eatre utilis\u00e9s pour stocker des donn\u00e9es sous forme de cl\u00e9s et de valeurs. Les objets peuvent \u00e9galement \u00eatre imbriqu\u00e9s et manipul\u00e9s de mani\u00e8re dynamique. Les objets peuvent \u00eatre utilis\u00e9s pour cr\u00e9er des structures de donn\u00e9es complexes, telles que des listes, des tableaux multidimensionnels, des arbres et des graphes. Les objets sont \u00e9galement tr\u00e8s utiles lors de l'utilisation d'API et de biblioth\u00e8ques tierces, car ils peuvent \u00eatre utilis\u00e9s pour stocker et organiser des informations et des m\u00e9tadonn\u00e9es 1. Strings 2. Nombres 3. Booleens 4. Null 5. Symbole 6. Tableaux 7. Objet 8. Fonctions 9. Date 10. Erreurs","title":"Les objets et comment les utiliser pour cr\u00e9er des structures de donn\u00e9es complexes."},{"location":"js/js/#comment-utiliser-le-dom-document-object-model-pour-creer-des-interfaces-utilisateur-interactives","text":"Le DOM est un mod\u00e8le orient\u00e9 objet qui permet aux d\u00e9veloppeurs de cr\u00e9er des interfaces utilisateur interactives. Il peut \u00eatre utilis\u00e9 pour cr\u00e9er des pages web dynamiques et int\u00e9gr\u00e9es aux applications web. Le DOM permet aux d\u00e9veloppeurs d'acc\u00e9der aux \u00e9l\u00e9ments HTML et XML, d'effectuer des modifications et de cr\u00e9er des \u00e9v\u00e9nements et des interactions. Les d\u00e9veloppeurs peuvent donc cr\u00e9er des interfaces utilisateur interactives en ajoutant des \u00e9l\u00e9ments HTML et XML \u00e0 une page web et en attachant des fonctionnalit\u00e9s et des comportements \u00e0 ces \u00e9l\u00e9ments. Par exemple, les d\u00e9veloppeurs peuvent cr\u00e9er des \u00e9v\u00e9nements sur des boutons, des liens et des images pour permettre \u00e0 l'utilisateur de cliquer et de naviguer sur la page web. Les d\u00e9veloppeurs peuvent \u00e9galement ajouter des fonctionnalit\u00e9s avanc\u00e9es telles","title":"Comment utiliser le DOM (Document Object Model) pour cr\u00e9er des interfaces utilisateur interactives."},{"location":"js/js/#elements-du-dom-list","text":"//Affiche tous les \u00e9l\u00e9ments du DOM list document.querySelectorAll(\"*\");","title":"\u00e9l\u00e9ments du DOM list"},{"location":"js/js/#les-bibliotheques-et-frameworks-javascript-et-comment-les-utiliser","text":"","title":"Les biblioth\u00e8ques et frameworks JavaScript et comment les utiliser."},{"location":"js/js/#les-bibliotheques-js-liste","text":"React.js jQuery AngularJS Vue.js Node.js Polymer.js Backbone.js Ember.js Knockout.js Socket.io","title":"Les biblioth\u00e8ques js liste"},{"location":"js/js/#les-framework-js-liste","text":"Angular React Vue Ember Meteor Svelte Backbone Aurelia Polymer Knockout","title":"Les framework js liste"},{"location":"js/js/#comment-deboguer-et-tester-votre-code-javascript","text":"Utiliser des messages d'erreur et des alertes: Utiliser les outils de d\u00e9bogage int\u00e9gr\u00e9s: De nombreux navigateurs Web modernes comprennent des outils de d\u00e9bogage int\u00e9gr\u00e9s pour vous aider \u00e0 d\u00e9boguer votre code. Utiliser des outils externes: Il existe des outils externes d\u00e9di\u00e9s \u00e0 la d\u00e9boguation de JavaScript tels que Firebug et Chrome Developer Tools. Utiliser des biblioth\u00e8ques de d\u00e9bogage: Par exemple, vous pouvez utiliser la biblioth\u00e8que de d\u00e9bogage JavaScript Node.js pour trouver des erreurs, surveiller des variables et tracer des lignes de code. Ce cours est con\u00e7u pour les d\u00e9butants. Nous ne couvrirons pas les aspects avanc\u00e9s de JavaScript, mais vous donnerons les bases pour commencer \u00e0 apprendre le langage.","title":"Comment d\u00e9boguer et tester votre code JavaScript."}]}